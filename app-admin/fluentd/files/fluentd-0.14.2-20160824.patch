diff --git a/ChangeLog b/ChangeLog
index ba21dc6..60e8e84 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,6 +1,6 @@
 # v0.14
 
-## Release 0.14.1 - 2016/06/30
+## Release 0.14.2 - 2016/08/09
 
 ### New features / Enhancement
 
@@ -216,1133 +216,4 @@ This list includes changes of 0.14.0.pre.1 and release candidates.
   https://github.com/fluent/fluentd/pull/955
   https://github.com/fluent/fluentd/pull/966
 
-
-# v0.12
-
-## Release 0.12.24 - 2016/05/20
-
-### New features / Enhancement
-
-* buffer: Add drop_oldest_chunk to buffer_queue_full_action parameter
-  https://github.com/fluent/fluentd/pull/934
-* in_tail: Add "encoding" parameter
-  https://github.com/fluent/fluentd/pull/889
-* in_tail: Add "path_key" patameter
-  https://github.com/fluent/fluentd/pull/951
-* in_monitor_agent: Add emit_config parameter to emit plugin configuration together
-  https://github.com/fluent/fluentd/pull/963
-* config: Support multiline string in " quoted string
-  https://github.com/fluent/fluentd/pull/929
-
-### Bug fixes
-
-* in_http: Add 'Access-Control-Allow-Origin' to response header
-  https://github.com/fluent/fluentd/pull/882
-* parser: Fix logger on Fluent::StringUtil to use $log
-  https://github.com/fluent/fluentd/pull/926
-* out_forward: Add missing error class definition
-  https://github.com/fluent/fluentd/pull/953
-
-## Release 0.12.23 - 2016/05/03
-
-### Bug fixes
-
-* Fix string-scrub dependency on ruby > 2
-  https://github.com/fluent/fluentd/pull/933
-* fluent-debug: Fix regression
-  https://github.com/fluent/fluentd/pull/894
-
-## Release 0.12.22 - 2016/03/10
-
-### Bug fixes
-
-* supervisor: Require fcntl library for daemonize
-  https://github.com/fluent/fluentd/pull/845
-
-## Release 0.12.21 - 2016/03/03
-
-### New features / Enhancement
-
-* output: Use error stream in TimeSlicedOutput#emit
-  https://github.com/fluent/fluentd/pull/791
-* in_tail: Avoid unnecessary open call
-  https://github.com/fluent/fluentd/pull/788
-* in_tail: Add enable_watch_timer option
-  https://github.com/fluent/fluentd/pull/811
-* filter_record_transformer: Relax conditions which auto_typecast is applied when enable_ruby yes
-  https://github.com/fluent/fluentd/pull/817
-* Backport v0.14 refactoring changes
-
-### Bug fixes
-
-* in_tail: Fix input messages loss when receive_lines fail with BufferQueueLimitError
-  https://github.com/fluent/fluentd/pull/810
-* in_monitor_agent: Remove unnecessary fields from API response with debug mode
-  https://github.com/fluent/fluentd/pull/802
-* filter_record_transformer: Fix record_transformer to be thread-safe
-  https://github.com/fluent/fluentd/pull/816
-
-## Release 0.12.20 - 2016/01/26
-
-### New features / Enhancement
-
-* in_forward: Add skip_invalid_event paramter to check and skip invalid event
-  https://github.com/fluent/fluentd/pull/776
-* in_tail: Add multiline_flush_interval parameter for periodic flush with multiline format
-  https://github.com/fluent/fluentd/pull/775
-* filter_record_transformer: Improve ruby placeholder performance and adding 'record["key"]' syntax
-  https://github.com/fluent/fluentd/pull/766
-* Add on_exit_process hook point to DetachProcessMixin
-  https://github.com/fluent/fluentd/pull/757
-* Add descriptions to BufferedOutput and TimeSlicedOutput
-  https://github.com/fluent/fluentd/pull/759
-  https://github.com/fluent/fluentd/pull/760
-
-### Bug fixes
-
-* parser: Don't use BigDecimal in JSON parsing result with Oj
-  https://github.com/fluent/fluentd/pull/778
-* config: Fix the regression of unused parameter warning inside sub section
-  https://github.com/fluent/fluentd/pull/765
-
-## Release 0.12.19 - 2015/12/21
-
-### New features / Enhancement
-
-* input: Standardize logging level for source configs
-  https://github.com/fluent/fluentd/pull/743
-* buffer: Add buffer_queue_full_action parameter
-  https://github.com/fluent/fluentd/pull/745
-* parser/formatter: Use 'oj' when oj is installed in json parser/formatter
-  https://github.com/fluent/fluentd/pull/748
-
-### Bug fixes
-
-* fluent-cat: fix the regression of --msgpack option
-  https://github.com/fluent/fluentd/pull/747
-
-## Release 0.12.18 - 2015/12/09
-
-### New features / Enhancement
-
-* in_exec: Stop in_exec immediately at shutdown
-  https://github.com/fluent/fluentd/pull/526
-* in_exec: Support built-in text parsers
-  https://github.com/fluent/fluentd/pull/704
-* out_forward: raises ZeroDivisionError when no <server> is available
-  https://github.com/fluent/fluentd/pull/707
-* Add process_name parameter in system to change fluentd's process name
-  https://github.com/fluent/fluentd/pull/708
-* test: Add ParserTestDriver
-  https://github.com/fluent/fluentd/pull/702
-* test: Add FormatterTestDriver
-  https://github.com/fluent/fluentd/pull/712
-* Add parameter description to built-in plugins
-
-### Bug fixes
-
-* fix bug not to protect in-memory-buffer for multi thread emitting / run loop
-  https://github.com/fluent/fluentd/pull/710
-* in_tail: expand_paths exclude unreadable files
-  https://github.com/fluent/fluentd/pull/734
-
-## Release 0.12.17 - 2015/11/04
-
-### New features / Enhancement
-
-* Engine: Add Engine#msgpack_factory for v0.14 compatibility
-  https://github.com/fluent/fluentd/pull/693
-* Log shutdown plugin info to check shutdown sequence
-  https://github.com/fluent/fluentd/pull/689
-* in_monitor_agent: Emit plugin info to use existing plugins
-  https://github.com/fluent/fluentd/pull/670
-* config: Improve describing plugin parameters
-  https://github.com/fluent/fluentd/pull/683
-
-### Bug fixes
-
-* Tempfile should be binary mode
-  https://github.com/fluent/fluentd/pull/691
-* filter_record_transformer: Don't use popular name to prevent field overwrite when enable_ruby is true
-  https://github.com/fluent/fluentd/pull/687
-
-## Release 0.12.16 - 2015/09/30
-
-### New features / Enhancement
-
-* parser: Add null_value_pattern and null_empty_string option for ltsv, csv and tsv.
-  https://github.com/fluent/fluentd/pull/657
-* RPC: Implement /api/config.dump and /api/config.getDump APIs to dump in memory config
-  https://github.com/fluent/fluentd/pull/666
-* Add --show-plugin-config option
-  https://github.com/fluent/fluentd/pull/663
-
-### Bug fixes
-
-* in_http: Fix add_remote_addr and add_http_headers options not working on bulk request
-  https://github.com/fluent/fluentd/pull/673
-* parser: RegexpParser#initialize should wrap only Hash configuration
-  https://github.com/fluent/fluentd/pull/647
-
-## Release 0.12.15 - 2015/07/29
-
-### New features / Enhancement
-
-* in_status: Warn deprecation message
-  https://github.com/fluent/fluentd/pull/635
-* output: Modify TimeSlicedOutput#emit mechanizm to fit BufferedOutput#emit way
-  https://github.com/fluent/fluentd/pull/634
-
-## Release 0.12.14 - 2015/07/17
-
-### New features / Enhancement
-
-* config: Log unused section configuration as warn level
-  https://github.com/fluent/fluentd/pull/629
-* config: Add '@' to log_level. Keep log_level for backward compatibility
-  https://github.com/fluent/fluentd/pull/630
-* parser: Add time_key option for RegexpParser
-  https://github.com/fluent/fluentd/pull/588
-
-### Bug fixes
-
-* out_forward: Add 'dns_round_robin' option
-  https://github.com/fluent/fluentd/pull/632
-
-## Release 0.12.13 - 2015/07/09
-
-### New features / Enhancement
-
-* out_stdout: Support formatter plugins in out_stdout
-  https://github.com/fluent/fluentd/pull/617
-* filter_record_transformer: Add "auto_typecast" parameter
-  https://github.com/fluent/fluentd/pull/620
-* out_forward: Support DNS round robin
-  https://github.com/fluent/fluentd/pull/625
-* out_forward: Support heartbeat_type none to disable heartbeat
-  https://github.com/fluent/fluentd/pull/626
-
-### Bug fixes
-
-* config: Fix secret option to support config_section
-  https://github.com/fluent/fluentd/pull/628
-
-## Release 0.12.12 - 2015/06/12
-
-### New features / Enhancement
-
-* in_forward: Add chunk format check
-  https://github.com/fluent/fluentd/pull/611
-
-### Bug fixes
-
-* formatter: Fix SingleValueFormatter to prevent record from modified
-  https://github.com/fluent/fluentd/pull/615
-* config: configure requires Config::Element, not Hash
-  https://github.com/fluent/fluentd/pull/616
-
-## Release 0.12.11 - 2015/06/01
-
-### New features / Enhancement
-
-* fluent-cat: Add none format
-  https://github.com/fluent/fluentd/pull/606
-* config: Add secret option
-  https://github.com/fluent/fluentd/pull/604
-
-## Release 0.12.10 - 2015/05/28
-
-### New features / Enhancement
-
-* filter_record_transformer: add renew_time_key option to replace event time with processed field
-  https://github.com/fluent/fluentd/pull/602
-* config: add config_param `enum` type
-  https://github.com/fluent/fluentd/pull/600
-
-## Release 0.12.9 - 2015/05/19
-
-### New features / Enhancement
-
-* in_tail: Add read_lines_limit parameter to control chunk size
-  https://github.com/fluent/fluentd/pull/593
-* filter: add filter_stdout plugin
-  https://github.com/fluent/fluentd/pull/586
-* parser: add keep_time_key option
-  https://github.com/fluent/fluentd/pull/587
-* parser: keys parameter accepts json array configuration
-  https://github.com/fluent/fluentd/pull/592
-* Implement RPC server for better instance management
-  https://github.com/fluent/fluentd/pull/585
-
-### Bug fixes
-
-* out_file: Fix out_file can create directory recursively
-  https://github.com/fluent/fluentd/pull/595
-
-## Release 0.12.8 - 2015/04/22
-
-### New features / Enhancement
-
-* output: Support millisecond for try_flush_interval and queued_chunk_flush_interval
-  https://github.com/fluent/fluentd/pull/568
-* filter_record_transformer: Support fields which start with @
-  https://github.com/fluent/fluentd/pull/574
-* config: Add final attribute to prevent config overwritten by subclass
-  https://github.com/fluent/fluentd/pull/583
-
-### Bug fixes
-
-* config: fix embedded code parsing
-  https://github.com/fluent/fluentd/pull/564
-* out_forward: Resend chunks on dropped connection when wait ACK
-  https://github.com/fluent/fluentd/pull/580
-
-## Release 0.12.7 - 2015/03/22
-
-### New features / Enhancement
-
-* in_tail: Add exclude_path option to support exclusion of files
-  https://github.com/fluent/fluentd/pull/561
-* filter_record_transformer: Support placeholders in record keys
-  https://github.com/fluent/fluentd/pull/558
-
-
-## Release 0.12.6 - 2015/03/03
-
-### Bug fixes
-
-* out_forward: Should handle ECONNREFUSED exeception on TCP heartbeat
-* test: BufferedOutputTestDriver must use correct buffer chunk type
-
-## Release 0.12.5 - 2015/02/09
-
-### New features / Enhancement
-
-* in_tail: Enable multiline mode if format contains 'multiline'
-  https://github.com/fluent/fluentd/pull/545
-* event: Improve EventStream#to_msgpack_stream performance
-  https://github.com/fluent/fluentd/pull/549
-* engine: Add tag information emit log
-
-### Bug fixes
-
-* Update msgpack dependency to avoid incompatible encoding problem
-  https://github.com/fluent/fluentd/pull/550
-
-## Release 0.12.4 - 2015/01/23
-
-### New features / Enhancement
-
-* Support 64bit inode environment in in_tail
-  https://github.com/fluent/fluentd/pull/542
-
-### Bug fixes
-
-* Fix ThreadError occuring on Signal.trap SIGHUP
-  https://github.com/fluent/fluentd/pull/541
-
-## Release 0.12.3 - 2015/01/16
-
-### New features / Enhancement
-
-* parser: nginx and apache2 format can now parse access log without http-version
-  https://github.com/fluent/fluentd/pull/535
-* filter_record_transformer: Allow non-string values like array / hash
-  https://github.com/fluent/fluentd/pull/530
-* plugin: Add writable check for path related parameter
-  https://github.com/fluent/fluentd/pull/401
-* command: -g and -G now works in embedded Ruby environment like Treasure Agent
-  https://github.com/fluent/fluentd/pull/423
-
-### Bug fixes
-
-* buffer: Fix to flush a buffer by USR1 signal even on retrying
-  https://github.com/fluent/fluentd/pull/531
-* buffer: Fix TimeSlicedOutput doesn't flush with SIGUSR1
-  https://github.com/fluent/fluentd/pull/533
-* buffer: Fix broken calc_retry_wait if Integer is used for retry_wait parameter
-  https://github.com/fluent/fluentd/pull/529
-* engine: Fix SIGHUP does not reload config
-  https://github.com/fluent/fluentd/pull/537
-
-## Release 0.12.2 - 2014/12/20
-
-### New Features / Enhancement
-
-* filter: Change filter behaviour. If filter method returns nil, its record is removed from stream.
-  https://github.com/fluent/fluentd/pull/515
-* in_monitor_agent: Render filter plugins
-  https://github.com/fluent/fluentd/pull/514
-* test: FilterTestDriver has run, emit and getting result methods
-  https://github.com/fluent/fluentd/pull/519
-
-### Bug fixes
-
-* test: Support @label by TestDriver
-  https://github.com/fluent/fluentd/pull/517
-
-## Release 0.12.1 - 2014/12/14
-
-### Bug fixes
-
-* plugin: Fix router is nil inside out_copy, out_roundrobin, and BufferedOutput secondary
-  https://github.com/fluent/fluentd/pull/508
-
-## Release 0.12.0 - 2014/12/12
-
-### New Features / Enhancement
-
-* config: Introduce @type and @id parameter for system parameter. type and id are still valid.
-* Filter: old tag trick of "using output plugins as filter" is no longer needed
-  v0.12.0 ships with grep and record_transformer filter plugins
-* Label: grouping Filter and Output plugins to reduce the complexity of event routing
-  @ERROR built-in label is also added to handle errors in emit
-  Add emit_error_event API to send invalid record to @ERROR
-* in_forward/out_forward: Add require_ack_response and ack_response_timeout for At-least-once semantics
-
-Here is the announcement for above new features: http://www.fluentd.org/blog/fluentd-v0.12-is-released
-
-* parser/formatter: Add base class and Plugin.new_xxx/Plugin.register_xxx APIs
-  https://github.com/fluent/fluentd/pull/495
-  https://github.com/fluent/fluentd/pull/497
-* formatter: Add new CSV formatter
-  https://github.com/fluent/fluentd/pull/489
-* formatter: Add msgpack format to built-in Formatter to dump records
-  https://github.com/fluent/fluentd/pull/479
-* input: Add in_dummy plugin
-  https://github.com/fluent/fluentd/pull/484
-* in_http: Add respond_with_empty_img parameter to return empty gif image
-  https://github.com/fluent/fluentd/pull/480
-* in_http: Add cors_allow_origins parameter to support CORS request
-  https://github.com/fluent/fluentd/pull/473
-* output: Add relable output plugin
-  https://github.com/fluent/fluentd/pull/417
-* config: Add self.name to configure_proxy error message
-  https://github.com/fluent/fluentd/pull/490
-* log: --suppress-repeated-stacktrace is true by default
-  https://github.com/fluent/fluentd/pull/446
-* Update msgpack to v0.5 and cool.io to v1.2
-
-### Bug fixes
-
-* config: Fix system config using double memory
-  https://github.com/fluent/fluentd/pull/496
-* config: Fix v1 config to support multiple tag match
-  https://github.com/fluent/fluentd/pull/478
-* config: Fix Config.bool_value regression for nil value
-  https://github.com/fluent/fluentd/pull/477
-* parser: Fix blank column handling of TSVParser
-  https://github.com/fluent/fluentd/pull/506
-* buffer: Prevent an exception with large num_retries
-  https://github.com/fluent/fluentd/pull/502
-* out_file: Don't create world writable directory in daemon mode
-  https://github.com/fluent/fluentd/pull/483
-
-# v0.10
-
-Release 0.10.57 - 2014/11/13
-
-* buffer: Make `total_queued_chunk_size` thread-safe to avoid race condition with `in_monitor_agent`
-   https://github.com/fluent/fluentd/pull/469
-* Add `--no-supervisor` option to disable the supervisor for supervision tools like runit
-   https://github.com/fluent/fluentd/pull/449
-
-0.10.57 was a bug fix release.
-
-Release 0.10.56 - 2014/10/31
-
-* config: Add Fluent::Config::Section#object_id to avoid NoMethodError by object dump tools
-  https://github.com/fluent/fluentd/pull/460
-* mixin: Fix SetTagKeyMixin and SetTimeKeyMixin which ignores config_set_default since 0.10.53
-  https://github.com/fluent/fluentd/pull/462
-* input/output: Support 'timezone' configuration parameter (e.g. "+09:00" for JST)
-  https://github.com/fluent/fluentd/pull/430
-* log: Use plugin_id instead of object_id in log message for consistency with in_monitor_agent
-  https://github.com/fluent/fluentd/pull/459
-
-Release 0.10.55 - 2014/10/16
-
-* config: Change v1's non-quoted string literal behaviour to v0's behaviour
-  https://github.com/fluent/fluentd/pull/436
-* config: Relax '@' handling in the plugin configuration for backward compatibility
-  https://github.com/fluent/fluentd/pull/455
-* config: Add --use-v0-config for keeping old configuration
-  https://github.com/fluent/fluentd/pull/434
-* config: Add single quoted literal in v1 configuration
-  https://github.com/fluent/fluentd/pull/437
-* config: Improve error message of Array / Hash parse error
-  https://github.com/fluent/fluentd/pull/457
-* input: Reduce shutdown time in some network related plugins when use Cool.io 1.2
-  https://github.com/fluent/fluentd/pull/440
-* parser: Use ParserError instead of general exception classes
-  https://github.com/fluent/fluentd/pull/453
-* Remove unused zfile buffer plugin
-  https://github.com/fluent/fluentd/pull/445
-
-Release 0.10.54 - skipped
-
-Release 0.10.53 - 2014/08/21
-
-* in_tail: Fix forget to detach Closer timer object
-* in_debug_agent: Fix config_param type of unix_path
-* in_syslog: Add include_source_host and source_host_Key options
-* config: Dump V1 escaped parameter correctly at start phase
-* config: Fix bug for config_param of bool value without defaults
-* config: Add 'alias' option to config_section and config_param
-* buffer: Add 'disable_retry_limit' option
-* engine: Reduce memory usage when retry_limit is large
-* parser: Add apache_error format
-* supervisor: Dump Fluentd version at dry run mode
-* test: InputTestDriver wait 'run' until input plugin emits all test data
-
-Release 0.10.52 - 2014/07/15
-
-* in_tail: Fix typo of warning argument. lb to line
-* config: Fix 'uninitialized constant Fluent::Config::V1Parser::URI' error
-* config: Reject '@' prefix of parameter name in V1 configuration. @ is reserved prefix.
-* config; Accept '#' comment in array and hash types
-* parser: Add time_format option to SyslogParser
-* parser: SyslogParser now makes ':' optional after pid
-* process: Fix 'mutex can't lock' issue of DetachMultiProcessMixin on Ruby 2.x
-* Add --without-source option to ignore <source> sections
-
-Release 0.10.51 - 2014/07/04
-
-* in_tail: Fix rotation handling when new file not found
-* in_syslog: Change debug log level to warn at pattern mismatch
-* formatter: Use localtime by default
-* parser: Add SyslogParser
-* parser: Add "estimate_current_event" attribute to TextParsers not to set current time into parse result
-* config: Add <system> section to set core parameters via configuration file
-* test: Support v1 configuration in TestDriver
-* Add udp and tcp input plugins
-
-Release 0.10.50 - 2014/06/17
-
-* in_tail: Fix race condition at shutdown
-* in_tail: read_from_head now works without pos_file
-* in_tail: Fix multiline format parsing without format_firstline
-* formatter: Add add_newline option to SingleValueFormatter
-* parser: Add block based API to support multi-events parsing
-* config: Fix encoding mismatch when @include used in v1
-* engine: Serialize shutdown order. Now shutdown input plugins first
-* Update rspec to 3.x
-
-Release 0.10.49 - 2014/06/05
-
-* in_http: Add format option to support various input data format
-* in_http: Accept json / msgpack array in default format
-* in_tail: Print warning message when file not exist with 'read_from_head true'
-* out_file: Add append option to disable path increment
-* out_file: Add format option to support various output data format
-* config: Fix broken 'include' processing in V1 configuration. Now add @include
-* fluentd-debug: Fix undefined method 'usage' error when invalid option passed
-* supervisor: Fix incorrect --group option handling
-* Add TextFormatter module for output plugins
-
-Release 0.10.48 - 2014/05/18
-
-* config: Add inspect method to Section for dumping the status
-* test: Fix the regression which forget to initialize $log in fluent/test.rb
-* Engine: Remove undocumented legacy plugin load mechanizm
-
-Release 0.10.47 - 2014/05/15
-
-* in_tail: Fix typo in flush_buffer
-* in_forward: Add chunk_size_warn_limit and chunk_size_limit for large chunks
-* in_monitor_agent: Add /api/config APIs to expose Fluentd configurations
-* supervisor: Add Supervisor.default_options to return default Fluentd options
-* test: Add DummyLogDevise and improve log handling in tests
-* config: Allow empty string value like `tag_mapped` in v1 configuration
-
-Release 0.10.46 - 2014/04/21
-
-* in_tail: Fix typo in rescue for dumping backtrace
-* in_forward: Add blocking_timeout option to avoid Cool.io loop stuck in shutdown
-* out_forward: Add phi_failure_detector option to disable "The Phi accrual failure detector"
-* buf_memory: Add flush_at_shutdown option to discard buffered event at shutdown
-* parser: Use Engine.now when time_key is missing in ValuesParser
-* parser: TextParser loads fluent/plugin/parser_xxx.rb automatically when 'xxx' format not found
-* Fix match cache expiration
-* Add new v1 configuration format and --use-v1-config option to enable v1 configuration format
-* Add config_section to Configurable to support nested parameters in plugins
-* Relax http_parser.rb gem version to support 0.6 series
-
-Release 0.10.45 - 2014/03/28
-
-* in_tail: Merge in_tail_ex and in_tail_multiline features
-* in_forward: Add linger_timeout option
-* out_exec: Support json and msgpack format
-* Engine: Fix signal handling when receives SIGTERM before loop starts
-* Use correct out_forward option in fluent.conf with --setup option
-* Ignore sigdump exception on signal unsupported environment
-
-Release 0.10.44 - 2014/02/26
-
-* in_forward: Print remote address and port in trace log
-* Remove several methods from fluentd-debug to call remote object method directly
-* Add --gemfile option to manage Fluentd and plugins using Gemfile and Bundler
-* Add <include path /> directive to include the configuration file under the elements
-* Add 'ruby' keyword to call Kernel method in configuration DSL
-* Relax Cool.io gem version to allow 1.2.x
-
-Release 0.10.43 - 2014/02/03
-
-* Input/Output: Add 'log_level' option to plugins
-* parser/in_tail: Fix RegexpParser forget to call configure method
-* parser/in_tail: Improve type conversion performance
-* in_http: Add add_http_headers option to add HTTP headers to record
-* Buffer: Improve submit_buffer throughput using round-robin writer selection
-* add sigdump gem to dump useful information via SIGCONT
-
-Release 0.10.42 - 2013/12/25
-
-* parser/in_tail: Add 'types' and related parameters to convert record value type
-* in_syslog: Add 'protocol_type' option for TCP support.
-* Buffer: Extract 'storable?' method for hook judge mechanizm by 3rd-party buffer plugins.
-* Output: Add 'try_flush_interval' parameter for high frequency flush.
-  It is undocumented because almost users never need this feature.
-* Change configuration unused checking to prevent memory leak when a plugin accesses configuratino keys.
-
-Release 0.10.41 - 2013/12/05
-
-* BufferedOutput: Add 'max_retry_wait' to limit retry interval
-* in_exec/object_space/syslog: Improve emit error message
-* Log: Add --suppress-repeated-stacktrace option to prevent log size explosion
-
-Release 0.10.40 - 2013/11/08
-
-* Dump gem version of fluent-plugin-xxx and fluent-mixin-xxx
-* in_http: Doesn't set REMOTE_ADDR when IO#getpeername failed
-* in_tail/parser: Fix RegexpParser which ignores time_format parameter
-* in_exec: Catch error and dumps error message in run_periodic
-* in_forward: Show error class in the error message
-* in_exec/out_exec_filter: Catch more exceptions, not only Errno::ESRCH, at shutdown
-* Log: Catch exception for log event handling at shutdown
-
-Release 0.10.39 - 2013/09/18
-
-* out_file: Improve symlink handling with buf_file
-* out_copy: Add deep_copy parameter for actual record copy
-* in_tail/parser: Add none format for supporting non-parse tailing like fluent-agent-lite
-* in_tail/parser: Improve performance using parsed time caching
-* Engine: Fix signal related exception in trap context at Ruby 2.0
-* buffer: Fix race condition when remove flushed chunk
-* add --suppress-config-dump option to disable dump configuration at start
-
-Release 0.10.38 - 2013/08/29
-
-* Fix require related problem in running test
-
-Release 0.10.37 - 2013/08/29
-
-* in_exec: Add format option to support tsv, json and msgpack. Default is tsv
-* out_stdout: Add output_type to print non-jsonable object
-* Engine: Skip nil record in emit
-* Check buffere_path duplication across buffer configurations.
-* Add experimental DSL to configuration format
-
-Release 0.10.36 - 2013/07/31
-
-* Log: add class name on each error logs
-* out_foward: change log level of node detachment/recovering/standby-failover from info to warn
-* out_file: add symlink_path parameter to point to latest written file
-* in_forward, in_http, in_unix: add backlog parameter to change resource backlog size
-* add --dry-run option to check fluentd setup without actual run
-* Fluentd now assumes configuration file written in UTF-8
-* update cool.io version to 1.1.1
-
-Release 0.10.35 - 2013/06/12
-
-* Log: emits fluentd's log via background thread
-* Log: use #inspect for non to_msgpack-able object in log event processing
-* FailureDetector/out_forward: fixed wrong phi calculation
-* in_stream: fixed unix domain connection leak when parsing json or msgpack failed
-* buf_file/out_file: sets 0644 permission to each created file for preventing
-  File.umask(0) effect at daemonize mode
-
-Release 0.10.34 - 2013/06/03
-
-* fluentd: supports --emit-error-log-interval to suppress log messages with the
-  same message for a certain seconds
-* BufferedOutput: fixed warning messages so that errors with the same meaning
-  use the same message
-* Log: ignores ThreadError which could happen in signal handler
-* Engine: prevents signal handlers from calling stop() method of plugins twice
-* MessagePackEventStream/in_forward: doesn't cache MessagePack::Unpacker (if
-  it uses msgpack-0.5.5 which doesn't cause performance impact) to not cause
-  problems with out_copy
-* TextParser/in_tail,in_syslog: 'json' format type removes time key from records
-* TextParser/in_tail,in_syslog: raises exception if time_format is set while
-  time_key is not set
-* in_tail: fixed minor bugs
-
-
-Release 0.10.33 - 2013/03/28
-
-* added in_monitor_agent
-* switched from jeweler to bundler
-* updated dependency for msgpack from '~> 0.4.4' to '~> 0.4.4 OR ~> 0.5.4'
-* added PluginId module so that in_monitor_agent can search plugins by id
-* BufferedOutput: added queued_chunk_flush_interval option to insert delay
-time before flushing queued chunks
-* BufferedOutput: randomize retry interval to prevent multiple servers from
-bursting network traffic at the same time
-* Configurable: sets @config instance variable
-
-
-Release 0.10.32 - 2013/03/04
-
-* in_tail: fixed the nil error problem which occurs with pos_file option
-* TextParser/in_tail: supports 'ltsv' (Labeled Tab-Separated Values) format: http://ltsv.org
-* #105: TextParser/in_tail: fixed 'nginx' format
-* #102: show log level in log messages
-* Gemfile: uses https source of rubygems instead of http
-
-
-Release 0.10.31 - 2013/01/31
-
-* out_forward: supports TCP heartbeat
-* in_tail reads rotated files from its head rather than its end when pos_file option is set
-* out_/in_ forward set O_NONBLOCK flag to the UDP heartbeat socket
-* Improved match cache expiration algorithm
-
-
-Release 0.10.30 - 2012/12/06
-
-* Shows configuration file at start time
-* Changed ruby version dependency from ~> 1.9.2 to => 1.9.2 so that it works
-  with ruby-2.0.
-* TimeSlicedOutput: overwrites default value of buffer_chunk_limit to 256m.
-  fluent-plugin-s3 will be affected.
-* TextParser/in_tail: supports 'nginx' preset formats
-* in/out_forward and in_syslog: support IPv6
-* out_forward: fixed a out of bounds bug
-
-
-Release 0.10.29 - 2012/11/26
-
-* buf_file: added flush_at_shutdown option to force flush before shuttingdown
-* TextParser shows message in warn level if text doesn't match the pattern
-
-
-Release 0.10.28 - 2012/10/30
-
-* in_http: on_request method can get headers as HTTP_* key and remote address
-  as REMOTE_ADDR key of the params argument
-
-
-Release 0.10.27 - 2012/10/11
-
-* added BufferChunk#unique_id which is an unique identifier of a buffered chunk
-* BufferedOutput: show 'temporarily failed' message
-
-
-Release 0.10.26 - 2012/09/26
-
-* added in_debug_agent plugin and fluent-debug command which enable you to
-  gather internal information of running Fluentd process using interactive shell
-* supervisor: --user commandline argument also inherits secondary groups (id -G)
-* out_forward: supports 'expire_dns_cache' option to set DNS expire time or disable
-  caching. Default behavior is 'never expire' which is same as former versions
-* out_forward: assumes successful data transfer via TCP as a successful
-  heartbeat.
-* out_forward: lazier failure detection: default phi_threshold 8 -> 10
-* in_forward: uses other nodes aggressively if it couldn't send data to the first
-  candidate to not stall during the wait time before detecting failure
-* in_forward: fixed shutdown procedure
-* in_tail: seeks to the saved position if detected log rotation actually
-  didn't rotate the file (meaning inode doesn't change). this change enables
-  cronolog to work with Fluentd.
-* in_tail: fixed a problem that it couldn't recover from uncaught exceptions
-  caused by output plugins
-* fluentd command supports '-q' option to decrease log level
-
-
-Release 0.10.25 - 2012/07/23
-
-* shutdown won't block
-* out_exec_filter supports 'child_respawn' option
-* in_tail doesn't remove whitespaces
-* out_roundrobin supports 'weight' option
-
-
-Release 0.10.24 - 2012/06/28
-
-* TextParser/in_tail: supports 'tsv' and 'csv' preset formats
-* supervisor set FD_CLOEXEC to @wait_daemonize_pipe_w in case the child
-process forked during run_configure
-
-
-Release 0.10.23 - 2012/06/25
-
-* out_exec_filter: show more error messages when child process unexpectedly exited
-* in_tail: Added 'apache2' format template which converts fields into integers or nil
-* TextParser creates a parser instance for each output for proper configuration
-* BufferedOutput: reset @flush_now flag
-* changed default buffer limit parameters:
-    Fluentd core:
-      buffer_chunk_limit 256MB -> 8MB
-      buffer_queue_limit 128 -> 256
-    buf_memory:
-      buffer_chunk_limit 32MB -> 8MB
-      buffer_queue_limit 32 -> 64
-    out_file:
-      buffer_chunk_limit -> 256MB
-
-
-Release 0.10.22 - 2012/05/02
-
-* Fixed in_tail and TextParser not to raise "time_format is required" error
-* out_exec_filter: fixed JSONFormatter to add \n at the end of records
-* out_exec_filter: separated {tag_key,time_key,time_format} parameters to
-  {in_,out_}{tag_key,time_key,time_format parameters while keeping
-  compatibility
-
-
-Release 0.10.21 - 2012/05/01
-
-* in_tail and TextParser support 'format json'
-* in_tail and TextParser support 'time_key' and 'time_format' parameters for 'format json'
-* in_tail: improved the file reader not to consume too much memory if the file is huge
-* out_stdout: uses logger instead of STDOUT to show records even if Fluentd is daemonized
-* Fixed the type of 'retry_wait' parameter of buffered output plugins from 'float' to 'time'
-* Fixed owner of log files for log rotation to work properly with --user and --group options
-
-
-Release 0.10.20 - 2012/04/27
-
-* Fixed Config#to_s
-* out_exec_filter: supports 'out_format json' option
-* out_exec_filter: supports 'in_format json' option
-
-
-Release 0.10.19 - 2012/04/17
-
-* Fixed in_syslog
-* in_tail: fixed "invalid byte sequence in US-ASCII" error
-* in_unix is not obsoleted
-
-
-Release 0.10.18 - 2012/04/13
-
-* Use Yajl instead of standard json library to avoid encoding problem
-* buf_memory: call force_encoding('ASCII-8BIT') to avoid encoding problem
-
-
-Release 0.10.17 - 2012/04/02
-
-* in_tail: don't ignore last line without LF [#44]
-* Added HandleTagNameMixin
-* Removed automake/conf style build support
-    Maintainig automake/conf style files are complex, but no user. We've decided
-    not to have those files anymore. Otherwise it's still used at rpm/deb packaging
-    scripts.
-
-
-Release 0.10.16 - 2012/03/26
-
-* Added in_gc plugin
-* Added in_object_space plugin
-* Changed dependency yajl-ruby from '~> 1.0.0' to '~> 1.0'
-
-
-Release 0.10.15 - 2012/03/09
-
-* Added experimental in_status plugin
-* out_forward: normalize the phi value of the failure detector into 1sec
-* out_forward: improved memory efficiency
-* out_forward: use weighted moving average for the phi accrual failure detector
-
-
-Release 0.10.14 - 2012/03/05
-
-* Show warnings if in_tcp or out_unix is used
-* BasicBuffer shows warnings when data.bytesize > @buffer_chunk_limit
-* out_forward: randomize roundrobin queue correctly
-* Added development dependencies to the gemspec
-
-
-Release 0.10.13 - 2012/02/21
-
-* Rewrote in_tail
-* Fixed SIGUSR1 handler to force flush logs
-
-
-Release 0.10.12 - 2012/02/13
-
-* Engine shows warnings when emitted record doesn't match any outputs
-* in_tail is rewritten to follow symbolic links correctly
-* out_forward uses independent default value as 'hard_timeout' parameter
-
-
-Release 0.10.11 - 2012/02/10
-
-* out_forward supports 'standby' parameter
-* out_forward handles 'hard_timeout' correctly
-
-
-Release 0.10.10 - 2012/02/09
-
-* in_forward and out_forward don't raise exceptions in callback handlers of
-  cool.io not to stop Loop#run
-* TimeSlicedOutput ignores time_slice_wait if flush_interval is specified
-* in_tail follows symbolic links correctly
-* in_http supports "Content-Type: application/json"
-* TestDriver#run sleeps 0.5 seconds for the out_exec_filter plugin
-
-
-Release 0.10.9 - 2012/01/19
-
-* Fixed TimeSlicedOutputTestDriver
-* Updated cool.io 1.0.0 -> 1.1.0
-* TextParser: fixed regexp of syslog parser to work with rsyslog on CentOS
-* out_exec_filter: improve performance by using buffering
-* out_exec_filter: added num_children parameter
-* out_exec_filter: added remove_prefix/add_prefix parameters
-* out_tail: show warning if pos_file parameter is not set
-* out_copy: fixed problems when event stream is not repeatable
-
-
-Release 0.10.8 - 2011/12/03
-
-* Added Supervisor: restart process on SIGHUP or unexpected end of process
-* Added -i commandline option which allows inline config
-* Added TimeSlicedOutputTestDriver
-* BufferedOutput outputs 'retry succeeded' message
-* Use Gem::Specification instead of Gem.searcher which is obsoleted
-* Added BasicBuffer#chunk_limit -> buffer_chunk_limit alias for backward
-  compatibility
-* buf_file: fixed to work with keys which contains '/'
-
-
-Release 0.10.7 - 2011/11/16
-
-* Supports multi-threaded on buffered output plugins ('num_threads')
-* Supports multi-process on input plugins ('detach_process')
-* Added ObjectBufferedOutput
-* Ensure to call 'shutdown' method of started plugins
-* in_tail supports 'pos_file' option that stores read position to a file
-
-
-Release 0.10.6 - 2011/11/11
-
-* Fixed --group NAME cmdline argument
-* Run configure(conf) after changing user and group
-* Fixed SIGHUP handling
-* BasicBuffer plugin uses Configurable module
-* buf_file uses microseconds + 12 bits random number for unique file name
-
-
-Release 0.10.5 - 2011/11/08
-
-* Added out_forward, in_forward
-* Added out_exec, in_exec
-* Added out_exec_filter
-
-
-Release 0.10.4 - 2011/11/07
-
-* TestDriver uses klass.dup.module_eval instead of inheriting class to
-  override methods
-* fixed encoding problem of String#[] in FileBufferChunk#<<(data)
-
-
-Release 0.10.3 - 2011/10/21
-
-  * Supports 'include' in config file
-    * Supports "http://" schema
-	* Supports wildcards
-
-
-Release 0.10.2 - 2011/10/18
-
-  * Fixed EventStream#to_msgpack_stream (thanks CkReal)
-  * Added gemspec.required_ruby_version = '~> 1.9.2' (thanks sakuro)
-
-
-Release 0.10.1 - 2011/10/16
-
-  * SetTimeKeyMixin accepts include_time_key parameter
-  * SetTagKeyMixin accepts include_tag_key parameter
-  * Fixed Makefile.am
-  * Fixed MemoryBufferChunk#msgpack_each
-
-
-Release 0.10.0 - 2011/10/16
-
-  * Removed Event class
-    * def format(tag, event) -> format(time, tag, record)
-	* def emit(tag, event) -> emit(tag, time, record)
-  * Added plugin APIs
-    * Added Configurable
-    * Added TimeFormatter
-    * Added SetTimeKeyMixin
-    * Added SetTagKeyMixin
-    * Added InputTestDriver
-  * Added Gemfile, gemspec and .rvmrc files
-
-
-Release 0.9.20 - 2011/10/07
-
-  * Config#has_key? sets used flag not to show warning
-  * in_tcp supports JSON
-  * Depends on Yajl
-  * Fixed fluentd -r option
-  * Fixed autogen.sh to create plugins directory
-
-
-Release 0.9.19 - 2011/10/07
-
-  * Secondary outputs work only when error count exceededs retry_limit
-  * Secondary outputs retry upto secondary_limit
-  * Added Output#secondary_init
-  * Added unit test driver for output plugins
-  * Added Fluent::Test.test? method
-  * Added comparision methods (<=>, ==, eql? and hash) to Event class
-  * Added test cases for out_copy, out_roundrobin and out_file
-
-
-Release 0.9.18 - 2011/10/04
-
-  * Performance improvements
-    * in_tcp uses lazy deserialization
-	* Engine caches results of Match#match
-	* out_file caches results of strftime
-  * Fixed TextParser.register_template
-
-
-Release 0.9.17 - 2011/10/03
-
-  * TimeSlicedOutput caches results of strftime() for performance
-  * Fixed TextParser.register_template (thanks eiichiroi)
-  * Fixed fluent-cat --port argument to work
-
-
-Release 0.9.16 - 2011/10/01
-
-  * Fixed it can't use relative path for --plugin command line argument
-  * Fixed out_copy to work with non-repeatable event streams
-
-
-Release 0.9.15 - 2011/09/21
-
-  * Set default encoding to ASCII-8BIT
-  * Fixed thread issues in BasicBuffer
-  * Performance improvements
-
-
-Release 0.9.14 - 2011/09/21
-
-  * Fixed to write unexpected error to log files
-  * Plugin loader uses GemSpec if it is available to load newer plugin
-  * Added Config.bool_value method for plugins
-
-
-Release 0.9.13 - 2011/09/21
-
-  * Updated out_file plugin
-    * Uses localtime by default
-    * Uses \t to separate time, tag and JSON.
-    * Uses ISO-8601 for the time format
-
-
-Release 0.9.12 - 2011/09/20
-
-  * Updated out_file plugin
-    * Supports log compression
-	* Slices log files every day by default
-
-
-Release 0.9.11 - 2011/09/19
-
-  * Added out_null plugin
-  * Added out_roundrobin plugin
-  * in_http supports keep-alive
-  * in_tcp and in_unix detect network failure
-
-
-Release 0.9.10 - 2011/09/07
-
-  * Periodic timer enqueues buffer chunks only when queue is empty
-
-
-Release 0.9.9 - 2011/09/06
-
-  * in_tail strips \n at the end of log line
-  * Uses newer one if multiple plugins are found
-
-
-Release 0.9.8 - 2011/08/16
-
-  * in_http plugin supports 'Expect: 100-continue' header
-  * Added --user and --group command line arguments to change privilege
-  * Changed default retry_limit parameter from 8 to 17
-  * Changed default buffer_chunk_limit parameter from 1m to 16m
-  * Changed default buffer_queue_limit parameter from 100 to 64
-
-
-Release 0.9.7 - 2011/08/06
-
-  * Load plugins named fluent_plugin.rb installed by RubyGems
-  * Load plugins located on fluent/plugin/{buf,in,out}_{type} installed by RubyGems
-  * Removed out_tdlog plugin to fluent-plugin-td gem
-
-
-Release 0.9.6 - 2011/08/06
-
-  * Force flush buffered events on SIGUSR1
-  * out_tdlog uses event tag for the database and table name
-  * Fluent can log Fluent logs
-  * Colorize Fluent logs on console
-  * Changed default unix domain socket path to /var/run/fluent/fluent.sock
-  * Makefile.am and configure.in aware fakeroot
-
-
-Release 0.9.5 - 2011/07/23
-
-  * Added <secondary> tag that fallbacks to secondary output when it can't
-    write to primary output.
-  * <match> pattern supports **; matches any fragments recursively.
-  * <match> pattern supports {x,y,...}; matches any of the inner patterns.
-
-
-Release 0.9.4 - 2011/07/22
-
-  * Switched EventMachine to Cool.io
-  * in_tail continues to follow file if it is deleted on Linux
-  * Added fluentd --setup option that installs sample configuration file
-  * Added out_tdlog plugin
-
-
-Release 0.9.3 - 2011/07/05
-
-  * Disable EventMachine.epoll because it doesn't work correctly on
-    Ruby 1.9 with threads
-  * in_tcp and in_unix uses EventMachine instead of threads
-  * Set BasicSocket.do_not_reverse_lookup = true
-
-
-Release 0.9.2 - 2011/07/03
-
-  * Added TimeSlicedOutput that splits buffer chunk exactly based on the time
-  * Changed structure of buffers from queue to map + queue
-  * Show waring if configuration parameters are not used
-  * Added out_time_file plugin
-
-
-Release 0.9.1 - 2011/06/26
-
-  * Added in_tail plugin
-  * Added in_syslog plugin
-  * Added out_stdout plugin
-  * Added out_tcp plugin
-  * Added out_unix plugin
-  * Improved performance of in_http plugin by replacing WEBrick + thread
-     with EventMachine
-
-
-Release 0.9.0 - 2011/06/20
-
-  * First release
-
+See https://github.com/fluent/fluentd/blob/v0.12/ChangeLog for v0.12 changelog
diff --git a/example/multi_filters.conf b/example/multi_filters.conf
new file mode 100644
index 0000000..0a33d21
--- /dev/null
+++ b/example/multi_filters.conf
@@ -0,0 +1,61 @@
+# This example is to measure optimized filter pipeline performance.
+
+<source>
+  @type dummy
+  tag   test
+  size 1000
+</source>
+
+<filter test>
+  @type grep
+  exclude1 hello .
+</filter>
+
+<filter test>
+  @type grep
+  exclude1 hello .
+</filter>
+
+<filter test>
+  @type grep
+  exclude1 hello .
+</filter>
+
+<filter test>
+  @type grep
+  exclude1 hello .
+</filter>
+
+<filter test>
+  @type grep
+  exclude1 hello .
+</filter>
+
+<filter test>
+  @type grep
+  exclude1 hello .
+</filter>
+
+<filter test>
+  @type grep
+  exclude1 hello .
+</filter>
+
+<filter test>
+  @type grep
+  exclude1 hello .
+</filter>
+
+<filter test>
+  @type grep
+  exclude1 hello .
+</filter>
+
+<filter test>
+  @type grep
+  exclude1 hello .
+</filter>
+
+<match test>
+  @type buffered_null
+</match>
diff --git a/lib/fluent/agent.rb b/lib/fluent/agent.rb
index 3fea70c..4a655ba 100644
--- a/lib/fluent/agent.rb
+++ b/lib/fluent/agent.rb
@@ -134,6 +134,9 @@ module Fluent
       output.router = @event_router if output.respond_to?(:router=)
       output.configure(conf)
       @outputs << output
+      if output.respond_to?(:outputs) && (output.is_a?(Fluent::Plugin::MultiOutput) || output.is_a?(Fluent::MultiOutput))
+        @outputs.push(*output.outputs)
+      end
       @event_router.add_rule(pattern, output)
 
       output
diff --git a/lib/fluent/command/debug.rb b/lib/fluent/command/debug.rb
index a5bc6f5..c291234 100644
--- a/lib/fluent/command/debug.rb
+++ b/lib/fluent/command/debug.rb
@@ -63,6 +63,7 @@ end
 require 'fluent/log'
 require 'fluent/engine'
 require 'fluent/system_config'
+require 'serverengine'
 
 include Fluent::SystemConfig::Mixin
 
@@ -90,13 +91,12 @@ include Fluent
 
 puts "Connected to #{uri}."
 puts "Usage:"
-puts "    Engine.match('some.tag').output  : get an output plugin instance"
-puts "    Engine.sources[i]                : get input plugin instances"
-puts "    Plugin.load_plugin(type,name)    : load plugin class (use this if you get DRb::DRbUnknown)"
+puts "    Fluent::Engine.match('some.tag').output  : get an output plugin instance"
+puts "    Fluent::Engine.sources[i]                : get input plugin instances"
+puts "    Fluent::Plugin.load_plugin(type,name)    : load plugin class (use this if you get DRb::DRbUnknown)"
 puts ""
 
 Encoding.default_internal = nil if Encoding.respond_to?(:default_internal)
 
 require 'irb'
 IRB.start
-
diff --git a/lib/fluent/compat/handle_tag_and_time_mixin.rb b/lib/fluent/compat/handle_tag_and_time_mixin.rb
index 517ddca..069e0b9 100644
--- a/lib/fluent/compat/handle_tag_and_time_mixin.rb
+++ b/lib/fluent/compat/handle_tag_and_time_mixin.rb
@@ -14,6 +14,8 @@
 #    limitations under the License.
 #
 
+require 'fluent/time' # TimeFormatter
+
 module Fluent
   module Compat
     module HandleTagAndTimeMixin
diff --git a/lib/fluent/compat/output.rb b/lib/fluent/compat/output.rb
index 24cbf38..1dd3691 100644
--- a/lib/fluent/compat/output.rb
+++ b/lib/fluent/compat/output.rb
@@ -19,8 +19,10 @@ require 'fluent/plugin/output'
 require 'fluent/plugin/bare_output'
 require 'fluent/compat/call_super_mixin'
 require 'fluent/compat/formatter_utils'
+require 'fluent/compat/handle_tag_and_time_mixin'
 require 'fluent/compat/parser_utils'
 require 'fluent/compat/propagate_default'
+require 'fluent/compat/record_filter_mixin'
 require 'fluent/compat/output_chain'
 require 'fluent/timezone'
 require 'fluent/mixin'
@@ -265,7 +267,7 @@ module Fluent
           conf.elements << Fluent::Config::Element.new('buffer', '', buf_params, [])
         end
 
-        @includes_record_filter = self.class.ancestors.include?(Fluent::RecordFilterMixin) # TODO rename Compat::RecordFilterMixin
+        @includes_record_filter = self.class.ancestors.include?(Fluent::Compat::RecordFilterMixin)
 
         methods_of_plugin = self.class.instance_methods(false)
         @overrides_emit = methods_of_plugin.include?(:emit)
@@ -361,11 +363,12 @@ module Fluent
         end
 
         meta = metadata(nil, nil, nil)
+        size = es.size
         data = es.map{|time,record| format(tag, time, record) }
         write_guard do
           @buffer.write({meta => data}, enqueue: enqueue)
         end
-        @counters_monitor.synchronize{ @emit_records += es_size }
+        @counters_monitor.synchronize{ @emit_records += size }
         [meta]
       end
 
diff --git a/lib/fluent/event_router.rb b/lib/fluent/event_router.rb
index fd3c819..d12c4fa 100644
--- a/lib/fluent/event_router.rb
+++ b/lib/fluent/event_router.rb
@@ -136,10 +136,12 @@ module Fluent
       def initialize
         @filters = []
         @output = nil
+        @optimizer = FilterOptimizer.new
       end
 
       def add_filter(filter)
         @filters << filter
+        @optimizer.filters = @filters
       end
 
       def set_output(output)
@@ -147,12 +149,82 @@ module Fluent
       end
 
       def emit_events(tag, es)
-        processed = es
-        @filters.each { |filter|
-          processed = filter.filter_stream(tag, processed)
-        }
+        processed = @optimizer.filter_stream(tag, es)
         @output.emit_events(tag, processed)
       end
+
+      class FilterOptimizer
+        def initialize(filters = [])
+          @filters = filters
+        end
+
+        def filters=(filters)
+          @filters = filters
+          reset_optimization
+        end
+
+        def filter_stream(tag, es)
+          if optimizable?
+            optimized_filter_stream(tag, es)
+          else
+            @filters.reduce(es) { |acc, filter| filter.filter_stream(tag, acc) }
+          end
+        end
+
+        private
+
+        def optimized_filter_stream(tag, es)
+          new_es = MultiEventStream.new
+          es.each do |time, record|
+            filtered_record = record
+            filtered_time = time
+
+            catch :break_loop do
+              @filters.each do |filter|
+                if filter.has_filter_with_time
+                  begin
+                    filtered_time, filtered_record = filter.filter_with_time(tag, filtered_time, filtered_record)
+                    throw :break_loop unless filtered_record && filtered_time
+                  rescue => e
+                    filter.router.emit_error_event(tag, filtered_time, filtered_record, e)
+                  end
+                else
+                  begin
+                    filtered_record = filter.filter(tag, filtered_time, filtered_record)
+                    throw :break_loop unless filtered_record
+                  rescue => e
+                    filter.router.emit_error_event(tag, filtered_time, filtered_record, e)
+                  end
+                end
+              end
+
+              new_es.add(filtered_time, filtered_record)
+            end
+          end
+          new_es
+        end
+
+        def optimizable?
+          return @optimizable unless @optimizable.nil?
+          @optimizable = if filters_having_filter_stream.empty?
+                           true
+                         else
+                           $log.info "Filtering works with worse performance, because #{filters_having_filter_stream.map(&:class)} uses `#filter_stream` method."
+                           false
+                         end
+        end
+
+        def filters_having_filter_stream
+          @filters_having_filter_stream ||= @filters.select do |filter|
+            filter.class.instance_methods(false).include?(:filter_stream)
+          end
+        end
+
+        def reset_optimization
+          @optimizable = nil
+          @filters_having_filter_stream = nil
+        end
+      end
     end
 
     def find(tag)
diff --git a/lib/fluent/plugin/filter.rb b/lib/fluent/plugin/filter.rb
index e79c9f1..1a509e2 100644
--- a/lib/fluent/plugin/filter.rb
+++ b/lib/fluent/plugin/filter.rb
@@ -30,22 +30,64 @@ module Fluent
 
       helpers :event_emitter
 
+      attr_reader :has_filter_with_time
+
+      def initialize
+        super
+        @has_filter_with_time = has_filter_with_time?
+      end
+
       def filter(tag, time, record)
         raise NotImplementedError, "BUG: filter plugins MUST implement this method"
       end
 
+      def filter_with_time(tag, time, record)
+        raise NotImplementedError, "BUG: filter plugins MUST implement this method"
+      end
+
       def filter_stream(tag, es)
         new_es = MultiEventStream.new
-        es.each do |time, record|
-          begin
-            filtered_record = filter(tag, time, record)
-            new_es.add(time, filtered_record) if filtered_record
-          rescue => e
-            router.emit_error_event(tag, time, record, e)
+        if @has_filter_with_time
+          es.each do |time, record|
+            begin
+              filtered_time, filtered_record = filter_with_time(tag, time, record)
+              new_es.add(filtered_time, filtered_record) if filtered_time && filtered_record
+            rescue => e
+              router.emit_error_event(tag, time, record, e)
+            end
+          end
+        else
+          es.each do |time, record|
+            begin
+              filtered_record = filter(tag, time, record)
+              new_es.add(time, filtered_record) if filtered_record
+            rescue => e
+              router.emit_error_event(tag, time, record, e)
+            end
           end
         end
         new_es
       end
+
+      private
+
+      def has_filter_with_time?
+        implmented_methods = self.class.instance_methods(false)
+        # Plugins that override `filter_stream` don't need check,
+        # because they may not call `filter` or `filter_with_time`
+        # for example fluentd/lib/fluent/plugin/filter_record_transformer.rb
+        return nil if implmented_methods.include?(:filter_stream)
+        case
+        when [:filter, :filter_with_time].all? { |e| implmented_methods.include?(e) }
+          raise "BUG: Filter plugins MUST be implemented either `filter` or `filter_with_time`"
+        when implmented_methods.include?(:filter)
+          false
+        when implmented_methods.include?(:filter_with_time)
+          true
+        else
+          raise NotImplementedError, "BUG: Filter plugins MUST be implmented either `filter` or `filter_with_time`"
+        end
+      end
     end
   end
 end
diff --git a/lib/fluent/plugin/filter_record_transformer.rb b/lib/fluent/plugin/filter_record_transformer.rb
index 28d3f4d..49c3cd0 100644
--- a/lib/fluent/plugin/filter_record_transformer.rb
+++ b/lib/fluent/plugin/filter_record_transformer.rb
@@ -204,7 +204,9 @@ module Fluent::Plugin
             end
           elsif value.kind_of?(Hash) # record, etc
             value.each do |k, v|
-              placeholders.store("${#{k}}", v) # foo
+              unless placeholder_values.has_key?(k) # prevent overwriting reserved keys such as tag
+                placeholders.store("${#{k}}", v) # foo
+              end
               placeholders.store(%Q[${#{key}["#{k}"]}], v) # record["foo"]
             end
           else # string, interger, float, and others?
diff --git a/lib/fluent/plugin/in_debug_agent.rb b/lib/fluent/plugin/in_debug_agent.rb
index 1cce084..e45d2ad 100644
--- a/lib/fluent/plugin/in_debug_agent.rb
+++ b/lib/fluent/plugin/in_debug_agent.rb
@@ -14,11 +14,11 @@
 #    limitations under the License.
 #
 
-require 'fluent/input'
+require 'fluent/plugin/input'
 
-module Fluent
+module Fluent::Plugin
   class DebugAgentInput < Input
-    Plugin.register_input('debug_agent', self)
+    Fluent::Plugin.register_input('debug_agent', self)
 
     def initialize
       require 'drb/drb'
@@ -30,13 +30,13 @@ module Fluent
     config_param :port, :integer, default: 24230
     config_param :unix_path, :string, default: nil
     #config_param :unix_mode  # TODO
-    config_param :object, :string, default: 'Engine'
+    config_param :object, :string, default: 'Fluent::Engine'
 
     def configure(conf)
       super
       if @unix_path
         unless ::Fluent::FileUtil.writable?(@unix_path)
-          raise ConfigError, "in_debug_agent: `#{@unix_path}` is not writable"
+          raise Fluent::ConfigError, "in_debug_agent: `#{@unix_path}` is not writable"
         end
       end
     end
diff --git a/lib/fluent/plugin/in_dummy.rb b/lib/fluent/plugin/in_dummy.rb
index 86bbe6d..c69c28f 100644
--- a/lib/fluent/plugin/in_dummy.rb
+++ b/lib/fluent/plugin/in_dummy.rb
@@ -30,6 +30,8 @@ module Fluent::Plugin
 
     desc "The value is the tag assigned to the generated events."
     config_param :tag, :string
+    desc "The number of events in event stream of each emits."
+    config_param :size, :integer, default: 1
     desc "It configures how many events to generate per second."
     config_param :rate, :integer, default: 1
     desc "If specified, each generated event has an auto-incremented key field."
@@ -97,7 +99,13 @@ module Fluent::Plugin
 
     def emit(num)
       begin
-        num.times { router.emit(@tag, Fluent::Engine.now, generate()) }
+        if @size > 1
+          num.times do
+            router.emit_array(@tag, Array.new(@size) { [Fluent::Engine.now, generate] })
+          end
+        else
+          num.times { router.emit(@tag, Fluent::Engine.now, generate) }
+        end
       rescue => _
         # ignore all errors not to stop emits by emit errors
       end
diff --git a/lib/fluent/plugin/in_forward.rb b/lib/fluent/plugin/in_forward.rb
index ca0a2a7..daf75fd 100644
--- a/lib/fluent/plugin/in_forward.rb
+++ b/lib/fluent/plugin/in_forward.rb
@@ -49,6 +49,8 @@ module Fluent
     config_param :chunk_size_limit, :size, default: nil
     desc 'Skip an event if incoming event is invalid.'
     config_param :skip_invalid_event, :bool, default: false
+    desc "The field name of the client's hostname."
+    config_param :source_hostname_key, :string, default: nil
 
     def configure(conf)
       super
@@ -145,7 +147,7 @@ module Fluent
     #   3: object record
     #   4: object option (optional)
     # }
-    def on_message(msg, chunk_size, source)
+    def on_message(msg, chunk_size, peeraddr)
       if msg.nil?
         # for future TCP heartbeat_request
         return
@@ -153,7 +155,7 @@ module Fluent
 
       # TODO: raise an exception if broken chunk is generated by recoverable situation
       unless msg.is_a?(Array)
-        log.warn "incoming chunk is broken:", source: source, msg: msg
+        log.warn "incoming chunk is broken:", source: source_message(peeraddr), msg: msg
         return
       end
 
@@ -161,10 +163,10 @@ module Fluent
       entries = msg[1]
 
       if @chunk_size_limit && (chunk_size > @chunk_size_limit)
-        log.warn "Input chunk size is larger than 'chunk_size_limit', dropped:", tag: tag, source: source, limit: @chunk_size_limit, size: chunk_size
+        log.warn "Input chunk size is larger than 'chunk_size_limit', dropped:", tag: tag, source: source_message(peeraddr), limit: @chunk_size_limit, size: chunk_size
         return
       elsif @chunk_size_warn_limit && (chunk_size > @chunk_size_warn_limit)
-        log.warn "Input chunk size is larger than 'chunk_size_warn_limit':", tag: tag, source: source, limit: @chunk_size_warn_limit, size: chunk_size
+        log.warn "Input chunk size is larger than 'chunk_size_warn_limit':", tag: tag, source: source_message(peeraddr), limit: @chunk_size_warn_limit, size: chunk_size
       end
 
       if entries.class == String
@@ -172,13 +174,14 @@ module Fluent
         option = msg[2]
         size = (option && option['size']) || 0
         es = MessagePackEventStream.new(entries, nil, size.to_i)
-        es = check_and_skip_invalid_event(tag, es, source) if @skip_invalid_event
+        es = check_and_skip_invalid_event(tag, es, peeraddr) if @skip_invalid_event
+        es = add_source_host(es, peeraddr[2]) if @source_hostname_key
         router.emit_stream(tag, es)
 
       elsif entries.class == Array
         # Forward
         es = if @skip_invalid_event
-               check_and_skip_invalid_event(tag, entries, source)
+               check_and_skip_invalid_event(tag, entries, peeraddr)
              else
                es = MultiEventStream.new
                entries.each { |e|
@@ -190,6 +193,7 @@ module Fluent
                }
                es
              end
+        es = add_source_host(es, peeraddr[2]) if @source_hostname_key
         router.emit_stream(tag, es)
         option = msg[2]
 
@@ -198,11 +202,12 @@ module Fluent
         time = msg[1]
         record = msg[2]
         if @skip_invalid_event && invalid_event?(tag, time, record)
-          log.warn "got invalid event and drop it:", source: source, tag: tag, time: time, record: record
+          log.warn "got invalid event and drop it:", source: source_message(peeraddr), tag: tag, time: time, record: record
           return msg[3] # retry never succeeded so return ack and drop incoming event.
         end
         return if record.nil?
         time = Engine.now if time.to_i == 0
+        record[@source_hostname_key] = peeraddr[2] if @source_hostname_key
         router.emit(tag, time, record)
         option = msg[3]
       end
@@ -215,11 +220,11 @@ module Fluent
       !((time.is_a?(Integer) || time.is_a?(::Fluent::EventTime)) && record.is_a?(Hash) && tag.is_a?(String))
     end
 
-    def check_and_skip_invalid_event(tag, es, source)
+    def check_and_skip_invalid_event(tag, es, peeraddr)
       new_es = MultiEventStream.new
       es.each { |time, record|
         if invalid_event?(tag, time, record)
-          log.warn "skip invalid event:", source: source, tag: tag, time: time, record: record
+          log.warn "skip invalid event:", source: source_message(peeraddr), tag: tag, time: time, record: record
           next
         end
         new_es.add(time, record)
@@ -227,16 +232,29 @@ module Fluent
       new_es
     end
 
+    def add_source_host(es, host)
+      new_es = MultiEventStream.new
+      es.each { |time, record|
+        record[@source_hostname_key] = host
+        new_es.add(time, record)
+      }
+      new_es
+    end
+
+    def source_message(peeraddr)
+      _, port, host, addr = peeraddr
+      "host: #{host}, addr: #{addr}, port: #{port}"
+    end
+
     class Handler < Coolio::Socket
       PEERADDR_FAILED = ["?", "?", "name resolusion failed", "?"]
 
       def initialize(io, linger_timeout, log, on_message)
         super(io)
 
+        @peeraddr = nil
         if io.is_a?(TCPSocket) # for unix domain socket support in the future
-          _proto, port, host, addr = ( io.peeraddr rescue PEERADDR_FAILED )
-          @source = "host: #{host}, addr: #{addr}, port: #{port}"
-
+          @peeraddr = (io.peeraddr rescue PEERADDR_FAILED)
           opt = [1, linger_timeout].pack('I!I!')  # { int l_onoff; int l_linger; }
           io.setsockopt(Socket::SOL_SOCKET, Socket::SO_LINGER, opt)
         end
@@ -265,7 +283,7 @@ module Fluent
           @serializer = :to_json.to_proc
           @y = Yajl::Parser.new
           @y.on_parse_complete = lambda { |obj|
-            option = @on_message.call(obj, @chunk_counter, @source)
+            option = @on_message.call(obj, @chunk_counter, @peeraddr)
             respond option
             @chunk_counter = 0
           }
@@ -293,7 +311,7 @@ module Fluent
       def on_read_msgpack(data)
         @chunk_counter += data.bytesize
         @u.feed_each(data) do |obj|
-          option = @on_message.call(obj, @chunk_counter, @source)
+          option = @on_message.call(obj, @chunk_counter, @peeraddr)
           respond option if option
           @chunk_counter = 0
         end
diff --git a/lib/fluent/plugin/in_tail.rb b/lib/fluent/plugin/in_tail.rb
index 90faf21..a96c1ee 100644
--- a/lib/fluent/plugin/in_tail.rb
+++ b/lib/fluent/plugin/in_tail.rb
@@ -67,14 +67,10 @@ module Fluent
     config_param :multiline_flush_interval, :time, default: nil
     desc 'Enable the additional watch timer.'
     config_param :enable_watch_timer, :bool, default: true
+    desc 'The encoding after conversion of the input.'
+    config_param :encoding, :string, default: nil
     desc 'The encoding of the input.'
-    config_param :encoding, default: nil do |encoding_name|
-      begin
-        Encoding.find(encoding_name)
-      rescue ArgumentError => e
-        raise ConfigError, e.message
-      end
-    end
+    config_param :from_encoding, :string, default: nil
     desc 'Add the log path being tailed to records. Specify the field name to be used.'
     config_param :path_key, :string, default: nil
 
@@ -95,6 +91,7 @@ module Fluent
 
       configure_parser(conf)
       configure_tag
+      configure_encoding
 
       @multiline_mode = conf['format'] =~ /multiline/
       @receive_handler = if @multiline_mode
@@ -120,6 +117,25 @@ module Fluent
       end
     end
 
+    def configure_encoding
+      unless @encoding
+        if @from_encoding
+          raise ConfigError, "tail: 'from_encoding' parameter must be specified with 'encoding' parameter."
+        end
+      end
+
+      @encoding = parse_encoding_param(@encoding) if @encoding
+      @from_encoding = parse_encoding_param(@from_encoding) if @from_encoding
+    end
+
+    def parse_encoding_param(encoding_name)
+      begin
+        Encoding.find(encoding_name) if encoding_name
+      rescue ArgumentError => e
+        raise ConfigError, e.message
+      end
+    end
+
     def start
       super
 
@@ -254,7 +270,13 @@ module Fluent
     def flush_buffer(tw)
       if lb = tw.line_buffer
         lb.chomp!
-        lb.force_encoding(@encoding) if @encoding
+        if @encoding
+          if @from_encoding
+            lb.encode!(@encoding, @from_encoding)
+          else
+            lb.force_encoding(@encoding)
+          end
+        end
         @parser.parse(lb) { |time, record|
           if time && record
             tag = if @tag_prefix || @tag_suffix
@@ -303,7 +325,13 @@ module Fluent
     def convert_line_to_event(line, es, tail_watcher)
       begin
         line.chomp!  # remove \n
-        line.force_encoding(@encoding) if @encoding
+        if @encoding
+          if @from_encoding
+            line.encode!(@encoding, @from_encoding)
+          else
+            line.force_encoding(@encoding)
+          end
+        end
         @parser.parse(line) { |time, record|
           if time && record
             record[@path_key] ||= tail_watcher.path unless @path_key.nil?
diff --git a/lib/fluent/plugin/output.rb b/lib/fluent/plugin/output.rb
index 32bc6ef..1a1100f 100644
--- a/lib/fluent/plugin/output.rb
+++ b/lib/fluent/plugin/output.rb
@@ -301,7 +301,7 @@ module Fluent
           @secondary.acts_as_secondary(self)
           @secondary.configure(secondary_conf)
           @secondary.router = router if @secondary.has_router?
-          if self.class != @secondary.class
+          if (self.class != @secondary.class) && (@custom_format || @secondary.implement?(:custom_format))
             log.warn "secondary type should be same with primary one", primary: self.class.to_s, secondary: @secondary.class.to_s
           end
         else
diff --git a/lib/fluent/plugin_helper/timer.rb b/lib/fluent/plugin_helper/timer.rb
index b4cdf7a..8a1c62a 100644
--- a/lib/fluent/plugin_helper/timer.rb
+++ b/lib/fluent/plugin_helper/timer.rb
@@ -66,6 +66,7 @@ module Fluent
         def initialize(title, interval, repeat, log, checker, &callback)
           @title = title
           @callback = callback
+          @repeat = repeat
           @log = log
           @checker = checker
           super(interval, repeat)
@@ -76,8 +77,12 @@ module Fluent
         rescue => e
           @log.error "Unexpected error raised. Stopping the timer.", title: @title, error: e
           @log.error_backtrace
-          self.detach
+          detach
           @log.error "Timer detached.", title: @title
+        ensure
+          if attached?
+            detach unless @repeat
+          end
         end
       end
     end
diff --git a/lib/fluent/supervisor.rb b/lib/fluent/supervisor.rb
index d97e861..273257c 100644
--- a/lib/fluent/supervisor.rb
+++ b/lib/fluent/supervisor.rb
@@ -29,8 +29,10 @@ require 'shellwords'
 
 if Fluent.windows?
   require 'windows/library'
+  require 'windows/synchronize'
   require 'windows/system_info'
   include Windows::Library
+  include Windows::Synchronize
   include Windows::SystemInfo
   require 'win32/ipc'
   require 'win32/event'
@@ -48,6 +50,11 @@ module Fluent
       end
       install_supervisor_signal_handlers
 
+      if config[:signame]
+        @signame = config[:signame]
+        install_windows_event_handler
+      end
+
       socket_manager_path = ServerEngine::SocketManager::Server.generate_path
       ServerEngine::SocketManager::Server.open(socket_manager_path)
       ENV['SERVERENGINE_SOCKETMANAGER_PATH'] = socket_manager_path.to_s
@@ -135,6 +142,22 @@ module Fluent
       end unless Fluent.windows?
     end
 
+    def install_windows_event_handler
+      Thread.new do
+        ev = Win32::Event.new(@signame)
+        begin
+          ev.reset
+          until WaitForSingleObject(ev.handle, 0) == WAIT_OBJECT_0
+            sleep 1
+          end
+          kill_worker
+          stop(true)
+        ensure
+          ev.close
+        end
+      end
+    end
+
     def supervisor_sighup_handler
       kill_worker
     end
@@ -224,6 +247,7 @@ module Fluent
       pid_path = params['daemonize']
       daemonize = !!params['daemonize']
       main_cmd = params['main_cmd']
+      signame = params['signame']
 
       se_config = {
           worker_type: 'spawn',
@@ -240,6 +264,7 @@ module Fluent
           logger_initializer: logger_initializer,
           chuser: chuser,
           chgroup: chgroup,
+          chumask: 0,
           suppress_repeated_stacktrace: suppress_repeated_stacktrace,
           daemonize: daemonize,
           rpc_endpoint: rpc_endpoint,
@@ -252,6 +277,7 @@ module Fluent
                                    JSON.dump(params)],
           fluentd_conf: fluentd_conf,
           main_cmd: main_cmd,
+          signame: signame,
       }
       if daemonize
         se_config[:pid_path] = pid_path
@@ -489,6 +515,7 @@ module Fluent
       params['chgroup'] = @chgroup
       params['use_v1_config'] = @use_v1_config
       params['suppress_repeated_stacktrace'] = @suppress_repeated_stacktrace
+      params['signame'] = @signame
 
       se = ServerEngine.create(ServerModule, WorkerModule){
         Fluent::Supervisor.load_config(@config_path, params)
diff --git a/lib/fluent/test/base.rb b/lib/fluent/test/base.rb
index ac17cf4..8b73e0d 100644
--- a/lib/fluent/test/base.rb
+++ b/lib/fluent/test/base.rb
@@ -30,7 +30,9 @@ module Fluent
           if block
             # Create new class for test w/ overwritten methods
             #   klass.dup is worse because its ancestors does NOT include original class name
+            klass_name = klass.name
             klass = Class.new(klass)
+            klass.define_singleton_method("name") { klass_name }
             klass.module_eval(&block)
           end
           @instance = klass.new
diff --git a/lib/fluent/test/driver/base.rb b/lib/fluent/test/driver/base.rb
index 4a45d3b..d087f72 100644
--- a/lib/fluent/test/driver/base.rb
+++ b/lib/fluent/test/driver/base.rb
@@ -31,7 +31,9 @@ module Fluent
             if block
               # Create new class for test w/ overwritten methods
               #   klass.dup is worse because its ancestors does NOT include original class name
+              klass_name = klass.name
               klass = Class.new(klass)
+              klass.define_singleton_method("name") { klass_name }
               klass.module_eval(&block)
             end
             @instance = klass.new
diff --git a/lib/fluent/test/formatter_test.rb b/lib/fluent/test/formatter_test.rb
index d27e261..8971141 100644
--- a/lib/fluent/test/formatter_test.rb
+++ b/lib/fluent/test/formatter_test.rb
@@ -26,7 +26,9 @@ module Fluent
           if block
             # Create new class for test w/ overwritten methods
             #   klass.dup is worse because its ancestors does NOT include original class name
+            klass_name = klass_or_str.name
             klass_or_str = Class.new(klass_or_str)
+            klass_or_str.define_singleton_method("name") { klass_name }
             klass_or_str.module_eval(&block)
           end
           @instance = klass_or_str.new
diff --git a/lib/fluent/test/parser_test.rb b/lib/fluent/test/parser_test.rb
index 83032ba..947530b 100644
--- a/lib/fluent/test/parser_test.rb
+++ b/lib/fluent/test/parser_test.rb
@@ -25,7 +25,9 @@ module Fluent
           if block
             # Create new class for test w/ overwritten methods
             #   klass.dup is worse because its ancestors does NOT include original class name
+            klass_name = klass_or_str.name
             klass_or_str = Class.new(klass_or_str)
+            klass_or_str.define_singleton_method("name") { klass_name }
             klass_or_str.module_eval(&block)
           end
           case klass_or_str.instance_method(:initialize).arity
diff --git a/lib/fluent/winsvc.rb b/lib/fluent/winsvc.rb
index 674f6b5..fca7c99 100644
--- a/lib/fluent/winsvc.rb
+++ b/lib/fluent/winsvc.rb
@@ -30,7 +30,7 @@ begin
   def read_fluentdopt
     require 'win32/Registry'
     Win32::Registry::HKEY_LOCAL_MACHINE.open("SYSTEM\\CurrentControlSet\\Services\\fluentdwinsvc") do |reg|
-      reg.read("fluentdopt")[1]
+      reg.read("fluentdopt")[1] rescue ""
     end
   end
 
@@ -47,7 +47,6 @@ begin
     @pid = 0
 
     def service_main
-      opt = read_fluentdopt
       @pid = service_main_start
       while running?
         sleep 10
diff --git a/test/compat/test_calls_super.rb b/test/compat/test_calls_super.rb
index be4dea4..67479d5 100644
--- a/test/compat/test_calls_super.rb
+++ b/test/compat/test_calls_super.rb
@@ -32,12 +32,14 @@ class CompatCallsSuperTest < Test::Unit::TestCase
   end
   class DummyGoodFilter < Fluent::Filter
     def configure(conf); super; end
+    def filter(tag, time, record); end
     def start; super; end
     def before_shutdown; super; end
     def shutdown; super; end
   end
   class DummyBadFilter < Fluent::Filter
     def configure(conf); super; end
+    def filter(tag, time, record); end
     def start; end
     def before_shutdown; end
     def shutdown; end
diff --git a/test/plugin/test_filter.rb b/test/plugin/test_filter.rb
index debf893..fbdcae5 100644
--- a/test/plugin/test_filter.rb
+++ b/test/plugin/test_filter.rb
@@ -30,6 +30,27 @@ module FluentPluginFilterTest
       record
     end
   end
+  class NumDoublePluginWithTime < Fluent::Plugin::Filter
+    def filter_with_time(tag, time, record)
+      r = record.dup
+      r["num"] = r["num"].to_i * 2
+      [time, r]
+    end
+  end
+  class IgnoreForNumPluginWithTime < Fluent::Plugin::Filter
+    def filter_with_time(tag, time, record)
+      if record["num"].is_a? Numeric
+        nil
+      else
+        [time, record]
+      end
+    end
+  end
+  class InvalidPlugin < Fluent::Plugin::Filter
+    # Because of implemnting `filter_with_time` and `filter` methods
+    def filter_with_time(tag, time, record); end
+    def filter(tag, time, record); end
+  end
 end
 
 class FilterPluginTest < Test::Unit::TestCase
@@ -53,12 +74,24 @@ class FilterPluginTest < Test::Unit::TestCase
   sub_test_case 'for basic dummy plugin' do
     setup do
       Fluent::Test.setup
-      @p = FluentPluginFilterTest::DummyPlugin.new
+    end
+
+    test 'plugin does not define #filter raises error' do
+      assert_raise NotImplementedError do
+        FluentPluginFilterTest::DummyPlugin.new
+      end
+    end
+  end
+
+  sub_test_case 'normal filter plugin' do
+    setup do
+      Fluent::Test.setup
+      @p = FluentPluginFilterTest::NumDoublePlugin.new
     end
 
     test 'has healthy lifecycle' do
       assert !@p.configured?
-      @p.configure(config_element())
+      @p.configure(config_element)
       assert @p.configured?
 
       assert !@p.started?
@@ -94,7 +127,7 @@ class FilterPluginTest < Test::Unit::TestCase
       assert @p.respond_to?(:plugin_id_configured?)
       assert @p.respond_to?(:plugin_id)
 
-      @p.configure(config_element())
+      @p.configure(config_element)
 
       assert !@p.plugin_id_configured?
       assert @p.plugin_id
@@ -128,30 +161,13 @@ class FilterPluginTest < Test::Unit::TestCase
       end
     end
 
-    test 'plugin does not define #filter raises error' do
-      es = [
-        [event_time('2016-04-19 13:01:00 -0700'), {"num" => "1", "message" => "Hello filters!"}],
-        [event_time('2016-04-19 13:01:03 -0700'), {"num" => "2", "message" => "Hello filters!"}],
-        [event_time('2016-04-19 13:01:05 -0700'), {"num" => "3", "message" => "Hello filters!"}],
-      ]
-      assert_raise NotImplementedError do
-        @p.filter_stream('testing', es)
-      end
-    end
-  end
-
-  sub_test_case 'normal filter plugin' do
-    setup do
-      Fluent::Test.setup
-      @p = FluentPluginFilterTest::NumDoublePlugin.new
-    end
-
     test 'filters events correctly' do
       test_es = [
         [event_time('2016-04-19 13:01:00 -0700'), {"num" => "1", "message" => "Hello filters!"}],
         [event_time('2016-04-19 13:01:03 -0700'), {"num" => "2", "message" => "Hello filters!"}],
         [event_time('2016-04-19 13:01:05 -0700'), {"num" => "3", "message" => "Hello filters!"}],
       ]
+      @p.configure(config_element)
       es = @p.filter_stream('testing', test_es)
       assert es.is_a? Fluent::EventStream
 
@@ -186,6 +202,7 @@ class FilterPluginTest < Test::Unit::TestCase
         [event_time('2016-04-19 13:01:03 -0700'), {"num" => 2, "message" => "Ignored, yay!"}],
         [event_time('2016-04-19 13:01:05 -0700'), {"num" => "3", "message" => "Hello filters!"}],
       ]
+      @p.configure(config_element)
       es = @p.filter_stream('testing', test_es)
       assert es.is_a? Fluent::EventStream
 
@@ -213,8 +230,7 @@ class FilterPluginTest < Test::Unit::TestCase
 
     test 'has router and can emit events to error streams' do
       assert @p.has_router?
-
-      @p.configure(config_element())
+      @p.configure(config_element)
       assert @p.router
 
       @p.router = DummyRouter.new([])
@@ -252,4 +268,82 @@ class FilterPluginTest < Test::Unit::TestCase
       assert_equal "Value of num is Number!", error_emits[0][3].message
     end
   end
+
+  sub_test_case 'filter plugins that is implmented `filter_with_time`' do
+    setup do
+      Fluent::Test.setup
+      @p = FluentPluginFilterTest::NumDoublePluginWithTime.new
+    end
+
+    test 'filters events correctly' do
+      test_es = [
+        [event_time('2016-04-19 13:01:00 -0700'), {"num" => "1", "message" => "Hello filters!"}],
+        [event_time('2016-04-19 13:01:03 -0700'), {"num" => "2", "message" => "Hello filters!"}],
+        [event_time('2016-04-19 13:01:05 -0700'), {"num" => "3", "message" => "Hello filters!"}],
+      ]
+      es = @p.filter_stream('testing', test_es)
+      assert es.is_a? Fluent::EventStream
+
+      ary = []
+      es.each do |time, r|
+        ary << [time, r]
+      end
+
+      assert_equal 3, ary.size
+
+      assert_equal event_time('2016-04-19 13:01:00 -0700'), ary[0][0]
+      assert_equal "Hello filters!", ary[0][1]["message"]
+      assert_equal 2, ary[0][1]["num"]
+
+      assert_equal event_time('2016-04-19 13:01:03 -0700'), ary[1][0]
+      assert_equal 4, ary[1][1]["num"]
+
+      assert_equal event_time('2016-04-19 13:01:05 -0700'), ary[2][0]
+      assert_equal 6, ary[2][1]["num"]
+    end
+  end
+
+  sub_test_case 'filter plugin that is implmented `filter_with_time` and returns nil for some records' do
+    setup do
+      Fluent::Test.setup
+      @p = FluentPluginFilterTest::IgnoreForNumPluginWithTime.new
+    end
+
+    test 'filter_stream ignores records which #filter_with_time return nil' do
+      test_es = [
+        [event_time('2016-04-19 13:01:00 -0700'), {"num" => "1", "message" => "Hello filters!"}],
+        [event_time('2016-04-19 13:01:03 -0700'), {"num" => 2, "message" => "Ignored, yay!"}],
+        [event_time('2016-04-19 13:01:05 -0700'), {"num" => "3", "message" => "Hello filters!"}],
+      ]
+      @p.configure(config_element)
+      es = @p.filter_stream('testing', test_es)
+      assert es.is_a? Fluent::EventStream
+
+      ary = []
+      es.each do |time, r|
+        ary << [time, r]
+      end
+
+      assert_equal 2, ary.size
+
+      assert_equal event_time('2016-04-19 13:01:00 -0700'), ary[0][0]
+      assert_equal "Hello filters!", ary[0][1]["message"]
+      assert_equal "1", ary[0][1]["num"]
+
+      assert_equal event_time('2016-04-19 13:01:05 -0700'), ary[1][0]
+      assert_equal "3", ary[1][1]["num"]
+    end
+  end
+
+  sub_test_case 'filter plugins that is implmented both `filter_with_time` and `filter`' do
+    setup do
+      Fluent::Test.setup
+    end
+
+    test 'raises DuplicatedImplementError' do
+      assert_raise do
+        FluentPluginFilterTest::InvalidPlugin.new
+      end
+    end
+  end
 end
diff --git a/test/plugin/test_filter_record_transformer.rb b/test/plugin/test_filter_record_transformer.rb
index 437ab8f..56b226e 100644
--- a/test/plugin/test_filter_record_transformer.rb
+++ b/test/plugin/test_filter_record_transformer.rb
@@ -174,12 +174,11 @@ class RecordTransformerFilterTest < Test::Unit::TestCase
       d = create_driver(config)
       yield d if block_given?
       d.run {
-        msgs.each do |msg|
-          record = {
-            'eventType0' => 'bar',
-            'message'    => msg,
-          }
-          record = record.merge(msg) if msg.is_a?(Hash)
+        records = msgs.map do |msg|
+          next msg if msg.is_a?(Hash)
+          { 'eventType0' => 'bar', 'message' => msg }
+        end
+        records.each do |record|
           d.feed(@tag, @time, record)
         end
       }
@@ -273,6 +272,23 @@ class RecordTransformerFilterTest < Test::Unit::TestCase
         end
       end
 
+      test "Prevent overwriting reserved keys such as tag with enable_ruby #{enable_ruby}" do
+        config = %[
+          enable_ruby #{enable_ruby}
+          <record>
+            new_tag ${tag}
+            new_record_tag ${record["tag"]}
+          </record>
+        ]
+        records = [{'tag' => 'tag', 'time' => 'time'}]
+        filtered = filter(config, records)
+        filtered.each_with_index do |(_t, r), i|
+          assert_not_equal('tag', r['new_tag'])
+          assert_equal(@tag, r['new_tag'])
+          assert_equal('tag', r['new_record_tag'])
+        end
+      end
+
       test "hash values with placeholders with enable_ruby #{enable_ruby}" do
         config = %[
           enable_ruby #{enable_ruby}
diff --git a/test/plugin/test_in_debug_agent.rb b/test/plugin/test_in_debug_agent.rb
index 3c2d0ec..917a837 100644
--- a/test/plugin/test_in_debug_agent.rb
+++ b/test/plugin/test_in_debug_agent.rb
@@ -1,5 +1,5 @@
 require_relative '../helper'
-require 'fluent/test'
+require 'fluent/test/driver/input'
 require 'fluent/plugin/in_debug_agent'
 require 'fileutils'
 
@@ -13,7 +13,7 @@ class DebugAgentInputTest < Test::Unit::TestCase
   TMP_DIR = File.expand_path(File.dirname(__FILE__) + "/../tmp/in_debug_agent")
 
   def create_driver(conf = '')
-    Fluent::Test::InputTestDriver.new(Fluent::DebugAgentInput).configure(conf)
+    Fluent::Test::Driver::Input.new(Fluent::Plugin::DebugAgentInput).configure(conf)
   end
 
   def test_unix_path_writable
diff --git a/test/plugin/test_in_forward.rb b/test/plugin/test_in_forward.rb
index 815b695..b765946 100644
--- a/test/plugin/test_in_forward.rb
+++ b/test/plugin/test_in_forward.rb
@@ -29,6 +29,7 @@ class ForwardInputTest < Test::Unit::TestCase
     port #{PORT}
     bind 127.0.0.1
   ]
+  PEERADDR = ['?', '0000', '127.0.0.1', '127.0.0.1']
 
   def create_driver(conf=CONFIG)
     Fluent::Test::InputTestDriver.new(Fluent::ForwardInput).configure(conf)
@@ -260,7 +261,7 @@ class ForwardInputTest < Test::Unit::TestCase
 
     d.run do
       Fluent::Engine.msgpack_factory.unpacker.feed_each(chunk) do |obj|
-        option = d.instance.send(:on_message, obj, chunk.size, "host: 127.0.0.1, addr: 127.0.0.1, port: 0000")
+        option = d.instance.send(:on_message, obj, chunk.size, PEERADDR)
         assert_equal option['size'], events.length
       end
     end
@@ -282,7 +283,7 @@ class ForwardInputTest < Test::Unit::TestCase
 
     d.run do
       Fluent::Engine.msgpack_factory.unpacker.feed_each(chunk) do |obj|
-        d.instance.send(:on_message, obj, chunk.size, "host: 127.0.0.1, addr: 127.0.0.1, port: 0000")
+        d.instance.send(:on_message, obj, chunk.size, PEERADDR)
       end
     end
 
@@ -311,7 +312,7 @@ class ForwardInputTest < Test::Unit::TestCase
 
     d.run do
       Fluent::Engine.msgpack_factory.unpacker.feed_each(chunk) do |obj|
-        d.instance.send(:on_message, obj, chunk.size, "host: 127.0.0.1, addr: 127.0.0.1, port: 0000")
+        d.instance.send(:on_message, obj, chunk.size, PEERADDR)
       end
     end
 
@@ -338,7 +339,7 @@ class ForwardInputTest < Test::Unit::TestCase
     # d.run => send_data
     d.run do
       Fluent::Engine.msgpack_factory.unpacker.feed_each(chunk) do |obj|
-        d.instance.send(:on_message, obj, chunk.size, "host: 127.0.0.1, addr: 127.0.0.1, port: 0000")
+        d.instance.send(:on_message, obj, chunk.size, PEERADDR)
       end
     end
 
@@ -360,7 +361,7 @@ class ForwardInputTest < Test::Unit::TestCase
 
     # d.run => send_data
     d.run do
-      d.instance.send(:on_message, data, 1000000000, "host: 127.0.0.1, addr: 127.0.0.1, port: 0000")
+      d.instance.send(:on_message, data, 1000000000, PEERADDR)
     end
 
     # check emitted data
@@ -476,7 +477,6 @@ class ForwardInputTest < Test::Unit::TestCase
 
     assert_equal events, d.emits
     assert_equal expected_acks, @responses.map { |res| JSON.parse(res)['ack'] }
-
   end
 
   def test_not_respond_to_message_not_requiring_ack
@@ -583,5 +583,53 @@ class ForwardInputTest < Test::Unit::TestCase
     @responses << res if try_to_receive_response
   end
 
+  # TODO: Use sub_test_case. Currently Errno::EADDRINUSE happens inside sub_test_case
+  test 'message protocol with source_hostname_key' do
+    execute_test { |events|
+      events.each { |tag, time, record|
+        send_data [tag, time, record].to_msgpack
+      }
+    }
+  end
+
+  test 'forward protocol with source_hostname_key' do
+    execute_test { |events|
+      entries = []
+      events.each {|tag,time,record|
+        entries << [time, record]
+      }
+      send_data ['tag1', entries].to_msgpack
+    }
+  end
+
+  test 'packed forward protocol with source_hostname_key' do
+    execute_test { |events|
+      entries = ''
+      events.each { |tag, time, record|
+        Fluent::Engine.msgpack_factory.packer(entries).write([time, record]).flush
+      }
+      send_data Fluent::Engine.msgpack_factory.packer.write(["tag1", entries]).to_s
+    }
+  end
+
+  def execute_test(&block)
+    d = create_driver(CONFIG + 'source_hostname_key source')
+
+    time = Fluent::EventTime.parse("2011-01-02 13:14:15 UTC")
+    events = [
+      ["tag1", time, {"a"=>1}],
+      ["tag1", time, {"a"=>2}]
+    ]
+    d.expected_emits_length = events.length
+
+    d.run do
+      block.call(events)
+    end
+
+    d.emits.each { |tag, _time, record|
+      assert_true record.has_key?('source')
+    }
+  end
+
   # TODO heartbeat
 end
diff --git a/test/plugin/test_in_tail.rb b/test/plugin/test_in_tail.rb
index 385ead6..872f0fd 100644
--- a/test/plugin/test_in_tail.rb
+++ b/test/plugin/test_in_tail.rb
@@ -71,6 +71,32 @@ class TailInputTest < Test::Unit::TestCase
     end
   end
 
+  def test_configure_from_encoding
+    # If only specified from_encoding raise ConfigError
+    assert_raise(Fluent::ConfigError) do
+      d = create_driver(SINGLE_LINE_CONFIG + 'from_encoding utf-8')
+    end
+
+    # valid setting
+    d = create_driver %[
+      format /(?<message>.*)/
+      read_from_head true
+      from_encoding utf-8
+      encoding utf-8
+    ]
+    assert_equal Encoding::UTF_8, d.instance.from_encoding
+
+    # invalid from_encoding
+    assert_raise(Fluent::ConfigError) do
+      d = create_driver %[
+        format /(?<message>.*)/
+        read_from_head true
+        from_encoding no-such-encoding
+        encoding utf-8
+      ]
+    end
+  end
+
   # TODO: Should using more better approach instead of sleep wait
 
   def test_emit
@@ -403,6 +429,28 @@ class TailInputTest < Test::Unit::TestCase
     assert_equal(encoding, emits[0][2]['message'].encoding)
   end
 
+  def test_from_encoding
+    d = create_driver %[
+      format /(?<message>.*)/
+      read_from_head true
+      from_encoding cp932
+      encoding utf-8
+    ]
+
+    d.run do
+      sleep 1
+
+      File.open("#{TMP_DIR}/tail.txt", "w:cp932") {|f|
+        f.puts "\x82\xCD\x82\xEB\x81\x5B\x82\xED\x81\x5B\x82\xE9\x82\xC7".force_encoding(Encoding::CP932)
+      }
+      sleep 1
+    end
+
+    emits = d.emits
+    assert_equal("\x82\xCD\x82\xEB\x81\x5B\x82\xED\x81\x5B\x82\xE9\x82\xC7".force_encoding(Encoding::CP932).encode(Encoding::UTF_8), emits[0][2]['message'])
+    assert_equal(Encoding::UTF_8, emits[0][2]['message'].encoding)
+  end
+
   # multiline mode test
 
   def test_multiline
@@ -507,6 +555,31 @@ class TailInputTest < Test::Unit::TestCase
     end
   end
 
+  def test_multiline_from_encoding_of_flushed_record
+    d = create_driver %[
+      format multiline
+      format1 /^s (?<message1>[^\\n]+)(\\nf (?<message2>[^\\n]+))?(\\nf (?<message3>.*))?/
+      format_firstline /^[s]/
+      multiline_flush_interval 2s
+      read_from_head true
+      from_encoding cp932
+      encoding utf-8
+    ]
+
+    d.run do
+      sleep 1
+      File.open("#{TMP_DIR}/tail.txt", "w:cp932") { |f|
+        f.puts "s \x82\xCD\x82\xEB\x81\x5B\x82\xED\x81\x5B\x82\xE9\x82\xC7".force_encoding(Encoding::CP932)
+      }
+
+      sleep 4
+      emits = d.emits
+      assert_equal(1, emits.length)
+      assert_equal("\x82\xCD\x82\xEB\x81\x5B\x82\xED\x81\x5B\x82\xE9\x82\xC7".force_encoding(Encoding::CP932).encode(Encoding::UTF_8), emits[0][2]['message1'])
+      assert_equal(Encoding::UTF_8, emits[0][2]['message1'].encoding)
+    end
+  end
+
   def test_multiline_with_multiple_formats
     File.open("#{TMP_DIR}/tail.txt", "wb") { |f| }
 
diff --git a/test/plugin/test_output.rb b/test/plugin/test_output.rb
index c2296dd..2ce372d 100644
--- a/test/plugin/test_output.rb
+++ b/test/plugin/test_output.rb
@@ -98,6 +98,17 @@ module FluentPluginOutputTest
 end
 
 class OutputTest < Test::Unit::TestCase
+    class << self
+      def startup
+        $LOAD_PATH.unshift File.expand_path(File.join(File.dirname(__FILE__), '../scripts'))
+        require 'fluent/plugin/out_test'
+      end
+
+      def shutdown
+        $LOAD_PATH.shift
+      end
+    end
+
   def create_output(type=:full)
     case type
     when :bare     then FluentPluginOutputTest::DummyBareOutput.new
@@ -477,6 +488,36 @@ class OutputTest < Test::Unit::TestCase
 
       i.stop; i.before_shutdown; i.shutdown; i.after_shutdown; i.close; i.terminate
     end
+
+    test "Warn if primary type is different from secondary type and either primary or secondary has custom_format" do
+      o = create_output(:buffered)
+      mock(o.log).warn("secondary type should be same with primary one",
+                                { primary: o.class.to_s, secondary: "Fluent::Plugin::TestOutput" })
+
+      o.configure(config_element('ROOT','',{},[config_element('secondary','',{'@type'=>'test', 'name' => "cool"})]))
+      assert_not_nil o.instance_variable_get(:@secondary)
+    end
+
+    test "don't warn if primary type is the same as secondary type" do
+      o = Fluent::Plugin::TestOutput.new
+      mock(o.log).warn("secondary type should be same with primary one",
+                                { primary: o.class.to_s, secondary: "Fluent::Plugin::TestOutput" }).never
+
+      o.configure(config_element('ROOT','',{'name' => "cool2"},
+                                 [config_element('secondary','',{'@type'=>'test', 'name' => "cool"}),
+                                  config_element('buffer','',{'@type'=>'memory'})]
+                                ))
+      assert_not_nil o.instance_variable_get(:@secondary)
+    end
+
+    test "don't warn if primary type is different from secondary type and both don't have custom_format" do
+      o = create_output(:standard)
+      mock(o.log).warn("secondary type should be same with primary one",
+                                { primary: o.class.to_s, secondary: "Fluent::Plugin::TestOutput" }).never
+
+      o.configure(config_element('ROOT','',{},[config_element('secondary','',{'@type'=>'test', 'name' => "cool"})]))
+      assert_not_nil o.instance_variable_get(:@secondary)
+    end
   end
 
   sub_test_case 'sync output feature' do
diff --git a/test/plugin_helper/test_timer.rb b/test/plugin_helper/test_timer.rb
index 9aca76c..2928507 100644
--- a/test/plugin_helper/test_timer.rb
+++ b/test/plugin_helper/test_timer.rb
@@ -97,4 +97,35 @@ class TimerTest < Test::Unit::TestCase
 
     d1.shutdown; d1.close; d1.terminate
   end
+
+  test 'can run at once' do
+    d1 = Dummy.new
+    d1.configure(config_element())
+    assert !d1.timer_running?
+    d1.start
+    assert d1.timer_running?
+
+    waiting_assertion = true
+    waiting_timer = true
+    counter = 0
+    d1.timer_execute(:test, 1, repeat: false) do
+      sleep(0.1) while waiting_assertion
+      counter += 1
+      waiting_timer = false
+    end
+
+    watchers = d1._event_loop.watchers.reject {|w| w.is_a?(Fluent::PluginHelper::EventLoop::DefaultWatcher) }
+    assert_equal(1, watchers.size)
+    assert(watchers.first.attached?)
+
+    waiting_assertion = false
+    sleep(0.1) while waiting_timer
+
+    assert_equal(1, counter)
+    assert_false(watchers.first.attached?)
+    watchers = d1._event_loop.watchers.reject {|w| w.is_a?(Fluent::PluginHelper::EventLoop::DefaultWatcher) }
+    assert_equal(0, watchers.size)
+
+    d1.shutdown; d1.close; d1.terminate
+  end
 end
diff --git a/test/test_event_router.rb b/test/test_event_router.rb
index 43c68cf..0ae0254 100644
--- a/test/test_event_router.rb
+++ b/test/test_event_router.rb
@@ -185,6 +185,10 @@ class EventRouterTest < ::Test::Unit::TestCase
 
     sub_test_case 'filter' do
       test 'filter should be called when tag matched' do
+        filter = Class.new(FluentTestFilter) { |x|
+          def filter_stream(_tag, es); end
+        }.new
+
         event_router.add_rule('test', filter)
 
         assert_rr do
@@ -229,6 +233,89 @@ class EventRouterTest < ::Test::Unit::TestCase
       end
     end
 
+    sub_test_case 'optimized filter' do
+      setup do
+        @record = { 'k' => 'v' }
+        @now = Engine.now
+      end
+
+      test 'call optimized filter when the filter plugin implements #filter without #filter_stream' do
+        event_router.add_rule('test', filter)
+
+        assert_rr do
+          mock(filter).filter('test', @now, @record) { @record }
+          event_router.emit('test', @now, @record)
+        end
+      end
+
+      test 'call optimized filter when the filter plugin implements #filter_with_time without #filter_stream' do
+        filter = Class.new(FluentTestFilter) {
+          undef_method :filter
+          def filter_with_time(tag, time, record); end
+        }.new
+
+        event_router.add_rule('test', filter)
+
+        assert_rr do
+          mock(filter).filter_with_time('test', @now, @record) { [time, @record] }
+          event_router.emit('test', @now, @record)
+        end
+      end
+
+      test "don't call optimized filter when filter plugins implement #filter_stream" do
+        filter = Class.new(FluentTestFilter) {
+          undef_method :filter
+          def filter_stream(tag, time, record); end
+        }.new
+
+        event_router.add_rule('test', filter)
+
+        assert_rr do
+          mock(filter).filter_stream('test', is_a(OneEventStream)) { OneEventStream.new(@now, @record) }
+          event_router.emit('test', @now, @record)
+        end
+      end
+
+      test 'call optimized filter when filter plugins have #filter_with_time instead of #filter' do
+        filter_with_time = Class.new(FluentTestFilter) {
+          undef_method :filter
+          def filter_with_time(tag, time, record); end
+        }.new
+
+        event_router.add_rule('test', filter_with_time)
+        event_router.add_rule('test', filter)
+
+        assert_rr do
+          mock(filter_with_time).filter_with_time('test', @now, @record) { [@now + 1, @record] }
+          mock(filter).filter('test', @now + 1, @record) { @record }
+          event_router.emit('test', @now, @record)
+        end
+      end
+
+      test "don't call optimized filter even if just a filter of some filters implements #filter_stream method" do
+        filter_stream = Class.new(FluentTestFilter) {
+          def filter_stream(tag, record); end
+        }.new
+
+        filter_with_time = Class.new(FluentTestFilter) {
+          undef_method :filter
+          def filter_with_time(tag, time, record); end
+        }.new
+
+        filters = [filter_stream, filter_with_time, filter]
+        filters.each { |f| event_router.add_rule('test', f) }
+
+        e = OneEventStream.new(@now, @record)
+        assert_rr do
+          mock($log).info("Filtering works with worse performance, because #{[filter_stream].map(&:class)} uses `#filter_stream` method.")
+          mock(filter_stream).filter_stream('test', is_a(OneEventStream)) { e }
+          mock(filter).filter_stream('test', is_a(OneEventStream)) { e }
+          mock(filter_with_time).filter_stream('test', is_a(OneEventStream)) { e }
+          event_router.emit('test', @now, @record)
+        end
+      end
+    end
+
     sub_test_case 'emit_error_handler' do
       test 'call handle_emits_error when emit failed' do
         event_router.add_rule('test', error_output)
diff --git a/test/test_filter.rb b/test/test_filter.rb
index 25eb189..59bc69e 100644
--- a/test/test_filter.rb
+++ b/test/test_filter.rb
@@ -23,17 +23,57 @@ class FilterTest < Test::Unit::TestCase
   end
 
   sub_test_case 'configure' do
-    test 'check default' do
-      assert_nothing_raised { create_driver }
+    test 'check to implement `filter` method' do
+      klass = Class.new(Fluent::Filter) do |c|
+        def filter(tag, time, record); end
+      end
+
+      assert_nothing_raised do
+        klass.new
+      end
+    end
+
+    test 'check to implement `filter_with_time` method' do
+      klass = Class.new(Fluent::Filter) do |c|
+        def filter_with_time(tag, time, record); end
+      end
+
+      assert_nothing_raised do
+        klass.new
+      end
+    end
+
+    test 'DO NOT check when implement `filter_stream`' do
+      klass = Class.new(Fluent::Filter) do |c|
+        def filter_stream(tag, es); end
+      end
+
+      assert_nothing_raised do
+        klass.new
+      end
     end
-  end
 
-  sub_test_case 'filter' do
     test 'NotImplementedError' do
-      not_implemented_filter = Class.new(Fluent::Filter)
-      assert_raise(NotImplementedError) { emit(not_implemented_filter, ['foo']) }
+      klass = Class.new(Fluent::Filter)
+
+      assert_raise NotImplementedError do
+        klass.new
+      end
+    end
+
+    test 'duplicated method implementation' do
+      klass = Class.new(Fluent::Filter) do |c|
+        def filter(tag, time, record); end
+        def filter_with_time(tag, time, record); end
+      end
+
+      assert_raise do
+        klass.new
+      end
     end
+  end
 
+  sub_test_case 'filter' do
     test 'null filter' do
       null_filter = Class.new(Fluent::Filter) do |c|
         def filter(tag, time, record)
@@ -61,6 +101,7 @@ class FilterTest < Test::Unit::TestCase
         def filter_stream(tag, es)
           MultiEventStream.new
         end
+        def filter(tag, time, record); record; end
       end
       es = emit(null_filter, ['foo'])
       assert_equal(0, es.instance_variable_get(:@record_array).size)
@@ -71,6 +112,7 @@ class FilterTest < Test::Unit::TestCase
         def filter_stream(tag, es)
           es
         end
+        def filter(tag, time, record); record; end
       end
       es = emit(pass_filter, ['foo'])
       assert_equal(1, es.instance_variable_get(:@record_array).size)
diff --git a/test/test_output.rb b/test/test_output.rb
index 3bb9160..b588b5f 100644
--- a/test/test_output.rb
+++ b/test/test_output.rb
@@ -65,6 +65,20 @@ module FluentOutputTest
       # assert_equal Float, d.instance.retry_wait.class
     end
 
+    class FormatterInjectTestOutput < Fluent::Output
+      def initialize
+        super
+        @formatter = nil
+      end
+    end
+    def test_start
+      i = FormatterInjectTestOutput.new
+      i.configure(config_element('ROOT', '', {}, [config_element('inject', '', {'hostname_key' => "host"})]))
+      assert_nothing_raised do
+        i.start
+      end
+    end
+
     def create_mock_driver(conf=CONFIG)
       Fluent::Test::BufferedOutputTestDriver.new(Fluent::BufferedOutput) do
         attr_accessor :submit_flush_threads
@@ -95,12 +109,37 @@ module FluentOutputTest
     end
 
     def test_secondary
-      d = create_driver(CONFIG + %[
+      d = Fluent::Test::BufferedOutputTestDriver.new(Fluent::BufferedOutput) do
+        def write(chunk)
+          chunk.read
+        end
+      end
+
+      mock(d.instance.log).warn("secondary type should be same with primary one",
+                                { primary: d.instance.class.to_s, secondary: "Fluent::Plugin::Test2Output" })
+      d.configure(CONFIG + %[
         <secondary>
           type test2
           name c0
         </secondary>
       ])
+
+      assert_not_nil d.instance.instance_variable_get(:@secondary).router
+    end
+
+    def test_secondary_with_no_warn_log
+      # ObjectBufferedOutput doesn't implemnt `custom_filter`
+      d = Fluent::Test::BufferedOutputTestDriver.new(Fluent::ObjectBufferedOutput)
+
+      mock(d.instance.log).warn("secondary type should be same with primary one",
+                                { primary: d.instance.class.to_s, secondary: "Fluent::Plugin::Test2Output" }).never
+      d.configure(CONFIG + %[
+        <secondary>
+          type test2
+          name c0
+        </secondary>
+      ])
+
       assert_not_nil d.instance.instance_variable_get(:@secondary).router
     end
   end
diff --git a/test/test_plugin_classes.rb b/test/test_plugin_classes.rb
index 8778f13..0f1bd1a 100644
--- a/test/test_plugin_classes.rb
+++ b/test/test_plugin_classes.rb
@@ -10,11 +10,13 @@ module FluentTest
     attr_reader :started
 
     def start
+      super
       @started = true
     end
 
     def shutdown
       @started = false
+      super
     end
   end
 
@@ -30,11 +32,13 @@ module FluentTest
     attr_reader :started
 
     def start
+      super
       @started = true
     end
 
     def shutdown
       @started = false
+      super
     end
 
     def emit(tag, es, chain)
@@ -69,11 +73,13 @@ module FluentTest
     attr_reader :started
 
     def start
+      super
       @started = true
     end
 
     def shutdown
       @started = false
+      super
     end
 
     def filter(tag, time, record)
@@ -96,11 +102,13 @@ module FluentTest
     attr_reader :started
 
     def start
+      super
       @started = true
     end
 
     def shutdown
       @started = false
+      super
     end
 
     def filter(tag, time, record)
diff --git a/test/test_root_agent.rb b/test/test_root_agent.rb
index 890e5e8..174334d 100644
--- a/test/test_root_agent.rb
+++ b/test/test_root_agent.rb
@@ -129,4 +129,146 @@ EOC
       assert_false @ra.outputs.first.started
     end
   end
+
+  sub_test_case 'configured with MultiOutput plugins' do
+    setup do
+      @ra = RootAgent.new(log: $log)
+      stub(Engine).root_agent { @ra }
+      @ra.configure(Config.parse(<<-EOC, "(test)", "(test_dir)", true))
+<source>
+  @type test_in
+  @id test_in
+</source>
+<filter>
+  @type test_filter
+  @id test_filter
+</filter>
+<match **>
+  @type copy
+  @id test_copy
+  <store>
+    @type test_out
+    @id test_out1
+  </store>
+  <store>
+    @type test_out
+    @id test_out2
+  </store>
+</match>
+EOC
+      @ra
+    end
+
+    test 'plugin status with multi output' do
+      assert_equal 1, @ra.inputs.size
+      assert_equal 1, @ra.filters.size
+      assert_equal 3, @ra.outputs.size
+
+      @ra.start
+      assert_equal [true], @ra.inputs.map{|i| i.started? }
+      assert_equal [true], @ra.filters.map{|i| i.started? }
+      assert_equal [true, true, true], @ra.outputs.map{|i| i.started? }
+
+      @ra.shutdown
+      assert_equal [true], @ra.inputs.map{|i| i.stopped? }
+      assert_equal [true], @ra.filters.map{|i| i.stopped? }
+      assert_equal [true, true, true], @ra.outputs.map{|i| i.stopped? }
+
+      assert_equal [true], @ra.inputs.map{|i| i.before_shutdown? }
+      assert_equal [true], @ra.filters.map{|i| i.before_shutdown? }
+      assert_equal [true, true, true], @ra.outputs.map{|i| i.before_shutdown? }
+
+      assert_equal [true], @ra.inputs.map{|i| i.shutdown? }
+      assert_equal [true], @ra.filters.map{|i| i.shutdown? }
+      assert_equal [true, true, true], @ra.outputs.map{|i| i.shutdown? }
+
+      assert_equal [true], @ra.inputs.map{|i| i.after_shutdown? }
+      assert_equal [true], @ra.filters.map{|i| i.after_shutdown? }
+      assert_equal [true, true, true], @ra.outputs.map{|i| i.after_shutdown? }
+
+      assert_equal [true], @ra.inputs.map{|i| i.closed? }
+      assert_equal [true], @ra.filters.map{|i| i.closed? }
+      assert_equal [true, true, true], @ra.outputs.map{|i| i.closed? }
+
+      assert_equal [true], @ra.inputs.map{|i| i.terminated? }
+      assert_equal [true], @ra.filters.map{|i| i.terminated? }
+      assert_equal [true, true, true], @ra.outputs.map{|i| i.terminated? }
+    end
+  end
+
+  sub_test_case 'configured with MultiOutput plugins and labels' do
+    setup do
+      @ra = RootAgent.new(log: $log)
+      stub(Engine).root_agent { @ra }
+      @ra.configure(Config.parse(<<-EOC, "(test)", "(test_dir)", true))
+<source>
+  @type test_in
+  @id test_in
+  @label @testing
+</source>
+<label @testing>
+  <filter>
+    @type test_filter
+    @id test_filter
+  </filter>
+  <match **>
+    @type copy
+    @id test_copy
+    <store>
+      @type test_out
+      @id test_out1
+    </store>
+    <store>
+      @type test_out
+      @id test_out2
+    </store>
+  </match>
+</label>
+EOC
+      @ra
+    end
+
+    test 'plugin status with multi output' do
+      assert_equal 1, @ra.inputs.size
+      assert_equal 0, @ra.filters.size
+      assert_equal 0, @ra.outputs.size
+      assert_equal 1, @ra.labels.size
+      assert_equal '@testing', @ra.labels.keys.first
+      assert_equal 1, @ra.labels.values.first.filters.size
+      assert_equal 3, @ra.labels.values.first.outputs.size
+
+      label_filters = @ra.labels.values.first.filters
+      label_outputs = @ra.labels.values.first.outputs
+
+      @ra.start
+      assert_equal [true], @ra.inputs.map{|i| i.started? }
+      assert_equal [true], label_filters.map{|i| i.started? }
+      assert_equal [true, true, true], label_outputs.map{|i| i.started? }
+
+      @ra.shutdown
+      assert_equal [true], @ra.inputs.map{|i| i.stopped? }
+      assert_equal [true], label_filters.map{|i| i.stopped? }
+      assert_equal [true, true, true], label_outputs.map{|i| i.stopped? }
+
+      assert_equal [true], @ra.inputs.map{|i| i.before_shutdown? }
+      assert_equal [true], label_filters.map{|i| i.before_shutdown? }
+      assert_equal [true, true, true], label_outputs.map{|i| i.before_shutdown? }
+
+      assert_equal [true], @ra.inputs.map{|i| i.shutdown? }
+      assert_equal [true], label_filters.map{|i| i.shutdown? }
+      assert_equal [true, true, true], label_outputs.map{|i| i.shutdown? }
+
+      assert_equal [true], @ra.inputs.map{|i| i.after_shutdown? }
+      assert_equal [true], label_filters.map{|i| i.after_shutdown? }
+      assert_equal [true, true, true], label_outputs.map{|i| i.after_shutdown? }
+
+      assert_equal [true], @ra.inputs.map{|i| i.closed? }
+      assert_equal [true], label_filters.map{|i| i.closed? }
+      assert_equal [true, true, true], label_outputs.map{|i| i.closed? }
+
+      assert_equal [true], @ra.inputs.map{|i| i.terminated? }
+      assert_equal [true], label_filters.map{|i| i.terminated? }
+      assert_equal [true, true, true], label_outputs.map{|i| i.terminated? }
+    end
+  end
 end
